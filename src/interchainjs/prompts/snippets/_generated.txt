TITLE: Combining Query and Transaction Helpers (JS)
DESCRIPTION: Shows a practical example of using getValidator to fetch validator information and then using delegate to perform a staking delegation transaction. It highlights the use of signing client, signer address, transaction parameters, fee, and memo.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// Import helpers
import { createQueryRpc } from "@interchainjs/cosmos/utils";
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";

// Query validator info
const { validator } = await getValidator(endpoint, {
  validatorAddr: "cosmosvaloper1..."
});

// Execute delegation
const result = await delegate(
  signingClient,
  signerAddress,
  {
    delegatorAddress: signerAddress,
    validatorAddress: validator.operatorAddress,
    amount: { denom: "uatom", amount: "1000000" }
  },
  fee,
  "Delegation via InterchainJS"
);
```

----------------------------------------

TITLE: Broadcasting Messages with Signing Client (JS)
DESCRIPTION: Shows how to construct a message object with typeUrl and value, define a transaction fee, and use the signing client's signAndBroadcast method to send the transaction.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_27

LANGUAGE: js
CODE:
```
const msg = {
  typeUrl: MsgSend.typeUrl,
  value: MsgSend.fromPartial({
    amount: [
      {
        denom: "inj",
        amount: "1000",
      },
    ],
    toAddress: address,
    fromAddress: address,
  }),
};

const fee: StdFee = {
  amount: [
    {
      denom: "inj",
      amount: "864",
    },
  ],
  gas: "86364",
};
const response = await signingClient.signAndBroadcast(address, [msg], fee);
```

----------------------------------------

TITLE: InterchainJS Transaction Signing and Broadcasting (TypeScript)
DESCRIPTION: Shows how to sign and broadcast a transaction using an InterchainJS DirectSigner instance (assumes signer is already initialized). It constructs the message, defines fee and memo, and uses the signer's signAndBroadcast method.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { DirectSigner } from '@interchainjs/cosmos/signers/direct';

(async () => {
  // Assume wallet generation using InterchainJS methods as shown earlier has been completed.
  
  const msg = {
    // Construct your message here using @interchainjs/cosmos-types
  };
  const fee = {
    amount: [{ denom: 'uatom', amount: '5000' }],
    gas: '200000',
  };
  const memo = "InterchainJS transaction test";
  
  const result = await signer.signAndBroadcast({
    messages: [msg], fee, memo
  });
  console.log("Transaction hash:", result.hash);
})();
```

----------------------------------------

TITLE: Initializing Direct and Amino Signers
DESCRIPTION: Examples showing how to initialize `DirectSigner` and `AminoSigner` instances, providing authentication details, message encoders/converters, RPC endpoint, and optional prefix. It also shows calling `signAndBroadcast` on the direct signer and logging the transaction hash.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#_snippet_3

LANGUAGE: ts
CODE:
```
import { DirectSigner } from "@interchainjs/cosmos/signers/direct";

// const signer = new DirectSigner(<AUTH>, <ENCODER>[], <RPC_ENDPOINT>); // **ONLY** rpc endpoint is supported for now
const signer = new DirectSigner(
      directAuth,
      // as many as possible encoders registered here.
      [MsgDelegate, TextProposal, MsgSubmitProposal, MsgVote],
      rpcEndpoint,
      { prefix: chainInfo.chain.bech32_prefix }
    );
const aminoSigner = new AminoSigner(
      aminoAuth,
      // as many as possible encoders registered here.
      [MsgDelegate, TextProposal, MsgSubmitProposal, MsgVote],
      // as many as possible converters registered here.
      [MsgDelegate, TextProposal, MsgSubmitProposal, MsgVote],
      rpcEndpoint,
      { prefix: chainInfo.chain.bech32_prefix }
    );
const result = await signer.signAndBroadcast(<MESSAGE>[]);
console.log(result.hash); // the hash of TxRaw
```

----------------------------------------

TITLE: Constructing Secp256k1HDWallet from Mnemonic in TypeScript
DESCRIPTION: Demonstrates how to initialize a Secp256k1HDWallet instance using a mnemonic phrase and specifying multiple HD paths to derive different accounts. Requires the Secp256k1HDWallet and HDPath classes.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/wallet.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { Secp256k1HDWallet } from "@interchainjs/cosmos/wallets/secp256k1hd";
import { HDPath } from "@interchainjs/types";

// init wallet with two accounts using two hd paths
const wallet = Secp256k1HDWallet.fromMnemonic(
  "<MNEMONIC_WORDS>",
  // use cosmos hdpath built by HDPath
  // we can get cosmos hdpath "m/44'/118'/0'/0/0" and "m/44'/118'/0/0/1" by this:
  [0, 1].map((i) => ({
    prefix: "cosmos",
    hdPath: HDPath.cosmos(0, 0, i).toString(),
  }))
);
```

----------------------------------------

TITLE: Initializing Signing Client with Signer (JS)
DESCRIPTION: Demonstrates how to connect to a signing client using SigningClient.connectWithSigner, providing an RPC endpoint, a signer, and signer options specific to Cosmos/Injective.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_26

LANGUAGE: js
CODE:
```
import { SigningClient } from "@interchainjs/cosmos/signing-client";
import { defaultSignerOptions } from "@interchainjs/injective/defaults";

const signingClient = await SigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new AminoGenericOfflineSigner(aminoOfflineSigner),
  {
    signerOptions: defaultSignerOptions.Cosmos,
  }
);
```

----------------------------------------

TITLE: Initializing InterchainJS Signing Client (JS)
DESCRIPTION: Demonstrates how to initialize the `SigningClient` from `@interchainjs/cosmos/signing-client`. It connects to an RPC endpoint using `connectWithSigner` and requires an offline signer implementation like `AminoGenericOfflineSigner`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_26

LANGUAGE: js
CODE:
```
import { SigningClient } from "@interchainjs/cosmos/signing-client";

const signingClient = await SigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new AminoGenericOfflineSigner(aminoOfflineSigner)
);
```

----------------------------------------

TITLE: Sending Transaction with Browser Signer (TypeScript)
DESCRIPTION: Initializes a signer using the browser's Ethereum provider (like MetaMask) and sends a transaction to a recipient with a specified value. It waits for the transaction receipt. Requires `@interchainjs/ethereum` and a browser environment with `window.ethereum` available.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { SignerFromBrowser } from "@interchainjs/ethereum/signers/SignerFromBrowser"
const signer = new SignerFromBrowser(window.ethereum)
const tx = await signer.send({
  to: recipientAddress,
  value: BigInt(10**18),
})
const receipt = await tx.wait()
```

----------------------------------------

TITLE: Deploying Smart Contract with Private Key Signer (TypeScript)
DESCRIPTION: Deploys a smart contract by sending a legacy transaction with the contract bytecode as data to the zero address. It waits for the transaction receipt and logs the deployed contract address. Requires an initialized `SignerFromPrivateKey` instance and compiled contract bytecode.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// Deploy a smart contract
const bytecode = '0x...'; // compiled contract bytecode
const { txHash: deployHash, wait: deployWait } = await signer.sendLegacyTransactionAutoGasLimit(
  '',
  0n,
  bytecode
)
const deployReceipt = await deployWait()
console.log('Contract deployed at:', deployReceipt.contractAddress)
```

----------------------------------------

TITLE: Initializing Cosmos DirectSigner with Wallet (TypeScript)
DESCRIPTION: This snippet illustrates how to initialize a DirectSigner for Cosmos using a Wallet object. It requires importing relevant types and utilities, creating a Secp256k1HDWallet instance from a mnemonic with a specified HD path and prefix, and then using the static fromWallet method of DirectSigner.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { DirectSigner } from "@interchainjs/cosmos/signers/direct";
import { DirectWallet, SignDoc } from "@interchainjs/cosmos/types";
import { toEncoder } from "@interchainjs/cosmos/utils";
import { MsgSend } from "@interchainjs/cosmos-types/cosmos/bank/v1beta1/tx";
import { HDPath } from "@interchainjs/types";

const directWallet = Secp256k1HDWallet.fromMnemonic("<MNEMONIC_WORDS>", [
  {
    // bech32_prefix
    prefix: "cosmos",
    // use cosmos hdpath built by HDPath
    // we can get cosmos hdpath "m/44'/118'/0'/0/0" by this:
    hdPath: HDPath.cosmos().toString(),
  },
]);
const signer = await DirectSigner.fromWallet(wallet, [toEncoder(MsgSend)], <RPC_ENDPOINT>);
```

----------------------------------------

TITLE: Converting Wallet to OfflineDirectSigner in TypeScript
DESCRIPTION: Shows how to obtain an OfflineDirectSigner instance from a Secp256k1HDWallet to perform direct signing operations while abstracting away the private key. It also demonstrates retrieving an account address from the signer.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/wallet.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
protoSigner = wallet.toOfflineDirectSigner();
address = (await protoSigner.getAccounts())[0].address;
```

----------------------------------------

TITLE: Initializing Cosmos DirectSigner with Auth (TypeScript)
DESCRIPTION: This example demonstrates how to create a DirectSigner instance for Cosmos using an Auth object. It involves importing necessary modules, creating a Secp256k1Auth instance from a mnemonic with a specified HD path, and then instantiating the DirectSigner with the auth object, message encoders, and an RPC endpoint.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { DirectSigner } from "@interchainjs/cosmos/signers/direct";
import { toEncoder } from "@interchainjs/cosmos/utils";
import { Secp256k1Auth } from "@interchainjs/auth/secp256k1";
import { MsgSend } from "@interchainjs/cosmos-types/cosmos/bank/v1beta1/tx";
import {
  HDPath
} from '@interchainjs/types';


const [auth] = Secp256k1Auth.fromMnemonic("<MNEMONIC_WORDS>", [
    // use cosmos hdpath built by HDPath
    // we can get cosmos hdpath "m/44'/118'/0'/0/0" by this:
    HDPath.cosmos().toString(),
]);
const signer = new DirectSigner(auth, [toEncoder(MsgSend)], <RPC_ENDPOINT>);
```

----------------------------------------

TITLE: Installing InterchainJS with npm (Shell)
DESCRIPTION: Installs the InterchainJS library as a project dependency using the npm package manager. This command fetches the latest version from the npm registry and adds it to the project's node_modules directory and package.json file.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install interchainjs
```

----------------------------------------

TITLE: Derive Cosmos HD Path and Create Secp256k1 Auth (TypeScript)
DESCRIPTION: Illustrates how to use the HDPath utility from @interchainjs/types to derive the default Cosmos HD path ('m/44'/118'/0'/0/0'). It shows that using HDPath.cosmos().toString() is equivalent to providing the hardcoded path string when creating a Secp256k1Auth instance from a mnemonic.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/auth/README.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { HDPath } from "@interchainjs/types";

// derive with Cosmos default HD path "m/44'/118'/0'/0/0"
const [auth] = Secp256k1Auth.fromMnemonic("<MNEMONIC_WORDS>", [
  // use cosmos hdpath built by HDPath
  // we can get cosmos hdpath "m/44'/118'/0'/0/0" by this:
  HDPath.cosmos().toString(),
]);
// is identical to
const [auth] = Secp256k1Auth.fromMnemonic("<MNEMONIC_WORDS>", [
  "m/44'/118'/0'/0/0",
]);
```

----------------------------------------

TITLE: Manually Constructing SigningClient (injectivejs/interchainjs, JS)
DESCRIPTION: Demonstrates how to manually create a `SigningClient` by combining various proto registries and amino converters from `injectivejs` and `@interchainjs/cosmos` before connecting with a signer. Useful for advanced configurations.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_27

LANGUAGE: js
CODE:
```
import {
    cosmosAminoConverters,
    cosmosProtoRegistry,
    cosmwasmAminoConverters,
    cosmwasmProtoRegistry,
    ibcProtoRegistry,
    ibcAminoConverters,
    injectiveAminoConverters,
    injectiveProtoRegistry
} from 'injectivejs';

const signer: OfflineSigner = /* create your signer (see above)  */
const rpcEndpoint = 'https://rpc.cosmos.directory/injective'; // or another URL

const protoRegistry: ReadonlyArray<[string, GeneratedType]> = [
    ...cosmosProtoRegistry,
    ...cosmwasmProtoRegistry,
    ...ibcProtoRegistry,
    ...injectiveProtoRegistry
];

const aminoConverters = {
    ...cosmosAminoConverters,
    ...cosmwasmAminoConverters,
    ...ibcAminoConverters,
    ...injectiveAminoConverters
};

const registry = new Registry(protoRegistry);
const aminoTypes = new AminoTypes(aminoConverters);

const signingClient = await SigningClient.connectWithSigner(rpcEndpoint, signer);

signingClient.addEncoders(registry);
signingClient.addConverters(aminoTypes);
```

----------------------------------------

TITLE: UniSigner Interface Definition (TypeScript)
DESCRIPTION: This code block shows the core definition of the UniSigner interface, highlighting its three primary methods: signArbitrary for general data signing, signDoc for signing structured documents efficient for on-chain verification, and sign for signing human-readable messages or transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#_snippet_3

LANGUAGE: ts
CODE:
```
/** you can import { UniSigner } from "@interchainjs/types" */
export interface UniSigner<SignDoc, Tx> {
  ...
  signArbitrary(data: Uint8Array): IKey;
  signDoc: (doc: SignDoc) => Promise<SignDocResponse<SignDoc>>;
  sign(
    messages: unknown,
    ...args: unknown[]
  ): Promise<SignResponse<SignDoc, Tx>>;
  ...
}
```

----------------------------------------

TITLE: Using useGetBalance Hook with InterchainJS Vue (TypeScript)
DESCRIPTION: Shows how to use the tree-shakable `useGetBalance` hook from `@interchainjs/vue` within a Vue component. It demonstrates setting up the request parameters using `computed`, configuring the hook with options (like `enabled` and `select`), and accessing the result, loading state, and refetch function. Requires a Vue setup with `computed` and potentially `BigNumber`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Import only what you need
import { useGetBalance } from '@interchainjs/vue/cosmos/bank/v1beta1/query.rpc.vue';

// Initialize RPC endpoint and address, then you can get balance by tree shakable hooks
  const request = computed(() => ({
    address: address.value,
    denom,
  }));

  const {
    data: balance,
    isSuccess: isBalanceLoaded,
    isLoading: isFetchingBalance,
    refetch: refetchBalance
  } = useGetBalance({
    request,
    options: {
      enabled: !!address,
      select: ({ balance }) =>
        new BigNumber(balance?.amount ?? 0).multipliedBy(
          10 ** -COIN_DISPLAY_EXPONENT
        ),
    },
    clientResolver: rpcEndpoint,
  })
```

----------------------------------------

TITLE: Initializing SigningClient with Signer (interchainjs, JS)
DESCRIPTION: Connects to an RPC endpoint and initializes a `SigningClient` using a provided offline signer and default Injective signer options. Requires `@interchainjs/cosmos/signing-client` and `@interchainjs/injective/defaults` dependencies.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_25

LANGUAGE: js
CODE:
```
import { SigningClient } from "@interchainjs/cosmos/signing-client";
import { defaultSignerOptions } from "@interchainjs/injective/defaults";

const signingClient = await SigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new AminoGenericOfflineSigner(aminoOfflineSigner),
  {
    signerOptions: defaultSignerOptions.Cosmos,
  }
);
```

----------------------------------------

TITLE: Querying All Balances with InterchainJS (JS)
DESCRIPTION: Demonstrates how to import and use a tree-shakable query helper (`getAllBalances`) from `@interchainjs/cosmos` to fetch all balances for a given address from a blockchain endpoint. Requires an endpoint and the target address.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_0

LANGUAGE: js
CODE:
```
// Import only what you need
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// Now you can query the blockchain
const balance = await getAllBalances(endpoint, {
  address: "cosmos1addresshere",
});
```

----------------------------------------

TITLE: Manually Constructing SigningClient (JS)
DESCRIPTION: Provides an example of manually creating a SigningClient by aggregating protocol buffer registries and Amino converters from various modules (cosmos, cosmwasm, ibc, injective) and adding them to the client after establishing the connection.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_14

LANGUAGE: js
CODE:
```
import {
    cosmosAminoConverters,
    cosmosProtoRegistry,
    cosmwasmAminoConverters,
    cosmwasmProtoRegistry,
    ibcProtoRegistry,
    ibcAminoConverters,
    injectiveAminoConverters,
    injectiveProtoRegistry
} from 'injective-vue';

const signer: OfflineSigner = /* create your signer (see above)  */
const rpcEndpoint = 'https://rpc.cosmos.directory/injective'; // or another URL

const protoRegistry: ReadonlyArray<[string, GeneratedType]> = [
    ...cosmosProtoRegistry,
    ...cosmwasmProtoRegistry,
    ...ibcProtoRegistry,
    ...injectiveProtoRegistry
];

const aminoConverters = {
    ...cosmosAminoConverters,
    ...cosmwasmAminoConverters,
    ...ibcAminoConverters,
    ...injectiveAminoConverters
};

const registry = new Registry(protoRegistry);
const aminoTypes = new AminoTypes(aminoConverters);

const signingClient = await SigningClient.connectWithSigner(rpcEndpoint, signer);

signingClient.addEncoders(registry);
signingClient.addConverters(aminoTypes);
```

----------------------------------------

TITLE: Constructing InjectiveJS Signing Client (JS)
DESCRIPTION: Demonstrates how to manually construct a SigningClient instance from the injectivejs library. It involves importing necessary registries and converters, combining them, creating a Registry and AminoTypes instance, and connecting with a signer and RPC endpoint before adding the encoders and converters to the client.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_28

LANGUAGE: js
CODE:
```
import {
    cosmosAminoConverters,
    cosmosProtoRegistry,
    cosmwasmAminoConverters,
    cosmwasmProtoRegistry,
    ibcProtoRegistry,
    ibcAminoConverters,
    injectiveAminoConverters,
    injectiveProtoRegistry
} from 'injectivejs';

const signer: OfflineSigner = /* create your signer (see above)  */
const rpcEndpoint = 'https://rpc.cosmos.directory/injective'; // or another URL

const protoRegistry: ReadonlyArray<[string, GeneratedType]> = [
    ...cosmosProtoRegistry,
    ...cosmwasmProtoRegistry,
    ...ibcProtoRegistry,
    ...injectiveProtoRegistry
];

const aminoConverters = {
    ...cosmosAminoConverters,
    ...cosmwasmAminoConverters,
    ...ibcAminoConverters,
    ...injectiveAminoConverters
};

const registry = new Registry(protoRegistry);
const aminoTypes = new AminoTypes(aminoConverters);

const signingClient = await SigningClient.connectWithSigner(rpcEndpoint, signer);

signingClient.addEncoders(registry);
signingClient.addConverters(aminoTypes);
```

----------------------------------------

TITLE: Using DirectSigner for Transaction Signing and Broadcasting
DESCRIPTION: Shows the pattern for using the DirectSigner instance (assumed to be created previously) to build a transaction message, optionally set fee and memo, and then sign and broadcast the transaction using the `signAndBroadcast` method provided by the InterchainJS Cosmos SDK.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { DirectSigner } from '@interchainjs/cosmos/signers/direct';
// (Wallet generation code as shown above is assumed to have been run)

// Build your transaction message (e.g., a bank message)
const msg = {
  // Construct your message based on the schema from @interchainjs/cosmos-types
};

// Optionally, set fee and memo information
const fee = {
  amount: [
    {
      denom: 'uatom',
      amount: '5000',
    },
  ],
  gas: '200000',
};

// Sign and broadcast the transaction
const result = await signer.signAndBroadcast([msg], {
  fee,
  memo: 'migration transaction test',
});
console.log('Transaction hash:', result.hash);
```

----------------------------------------

TITLE: Creating and Querying with Cosmos RPC Client (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to create and use an RPC client in InterchainJS to query data from a Cosmos-based blockchain. It shows importing a specific query function (getAllBalances), obtaining an RPC endpoint using a hook (useChain), and then calling the query function with the endpoint and necessary parameters.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_3

LANGUAGE: js
CODE:
```
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

{ getRpcEndpoint } = useChain("cosmoshub");

const endpoint = await getRpcEndpoint();

// now you can query the cosmos modules
const balance = await getAllBalances(endpoint,{
  address: "cosmos1addresshere",
});
```

----------------------------------------

TITLE: Initializing SigningClient with Default Options (JS)
DESCRIPTION: Demonstrates how to initialize a SigningClient from '@interchainjs/cosmos' using the 'connectWithSigner' method, providing an RPC endpoint, an offline signer, and default signer options specifically configured for Injective.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_12

LANGUAGE: js
CODE:
```
import { SigningClient } from "@interchainjs/cosmos/signing-client";
import { defaultSignerOptions } from "@interchainjs/injective/defaults";

const signingClient = await SigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new AminoGenericOfflineSigner(aminoOfflineSigner),
  {
    signerOptions: defaultSignerOptions.Cosmos,
  }
);
```

----------------------------------------

TITLE: Using Cosmos SigningClient with helper function
DESCRIPTION: Example demonstrating how to connect to a Cosmos RPC endpoint using `SigningClient.connectWithSigner` without needing to manually register message types when using tree-shakable helper functions like `submitProposal`. It shows how to call the helper function with the necessary parameters to sign and broadcast a transaction and log the transaction hash.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client';
import { submitProposal } from "interchainjs/cosmos/gov/v1beta1/tx.rpc.func";

const signingClient = await CosmosSigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new DirectGenericOfflineSigner(directSigner),
  {
    // no registry needed here anymore
    // registry: [
    // ],
    broadcast: {
      checkTx: true,
    },
  }
);

// Necessary typeurl and codecs will be registered automatically in the helper functions. Meaning users don't have to register them all at once.
const result = await submitProposal(
  signingClient,
  directAddress,
  {
    proposer: directAddress,
    initialDeposit: [
      {
        amount: '1000000',
        denom: denom,
      },
    ],
    content: {
      typeUrl: '/cosmos.gov.v1beta1.TextProposal',
      value: TextProposal.encode(contentMsg).finish(),
    },
  },
  fee,
  "submit proposal"
);
console.log(result.hash); // the hash of TxRaw
```

----------------------------------------

TITLE: Broadcasting Cosmos Messages (JS)
DESCRIPTION: Shows how to construct a Cosmos MsgSend message and a standard fee object, then use the 'signingClient.signAndBroadcast' method to sign the transaction with the connected wallet and broadcast it to the Injective blockchain.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_13

LANGUAGE: js
CODE:
```
const msg = {
  typeUrl: MsgSend.typeUrl,
  value: MsgSend.fromPartial({
    amount: [
      {
        denom: "inj",
        amount: "1000",
      },
    ],
    toAddress: address,
    fromAddress: address,
  }),
};

const fee: StdFee = {
  amount: [
    {
      denom: "inj",
      amount: "864",
    },
  ],
  gas: "86364",
};
const response = await signingClient.signAndBroadcast(address, [msg], fee);
```

----------------------------------------

TITLE: InterchainJS Wallet Generation (TypeScript)
DESCRIPTION: Illustrates how to generate a mnemonic and derive a Secp256k1Auth object using InterchainJS's Bip39, Random, Secp256k1Auth, and HDPath modules, then retrieves the wallet address.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import { Secp256k1Auth } from '@interchainjs/auth/secp256k1';
import { HDPath } from '@interchainjs/types';
import { Bip39, Random } from '@interchainjs/crypto';

(async () => {
  const mnemonic = Bip39.encode(Random.getBytes(16)).toString();
  const [auth] = Secp256k1Auth.fromMnemonic(mnemonic, [
    HDPath.cosmos(0, 0, 0).toString(),
  ]);
  console.log("Wallet address:", await auth.getAddress());
})();
```

----------------------------------------

TITLE: Interacting with Smart Contract (ERC20 Transfer) (TypeScript)
DESCRIPTION: Demonstrates interacting with a deployed smart contract, specifically performing an ERC20 token transfer. It uses `ContractEncoder` to encode the function call data and sends a legacy transaction to the contract address. Requires an initialized `SignerFromPrivateKey`, the contract ABI, and the contract address.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
// Interact with a deployed contract (transfer ERC20 tokens)
import { ContractEncoder } from "@interchainjs/ethereum/utils/ContractEncoder"
const abi = [ /* ERC20 contract ABI */ ]
const contractAddress = deployReceipt.contractAddress
const contract = new ContractEncoder(abi)
const dataHex = contract.transfer(recipientAddress, 1000000n)
const { txHash: tokenHash, wait: tokenWait } = await signer.sendLegacyTransactionAutoGasLimit(
  contractAddress,
  0n,
  dataHex
)
const tokenReceipt = await tokenWait()
console.log('Token transfer receipt:', tokenReceipt)
```

----------------------------------------

TITLE: Installing injective-react with npm
DESCRIPTION: Provides the command to install the injective-react library using the npm package manager. This is the standard way to add the library to your project dependencies.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install injective-react
```

----------------------------------------

TITLE: Install @interchainjs/injective Package
DESCRIPTION: Installs the @interchainjs/injective package using npm, making it available for use in your project.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install @interchainjs/injective
```

----------------------------------------

TITLE: Installing InjectiveJS with npm
DESCRIPTION: This command demonstrates how to install the InjectiveJS library using the npm package manager. It adds the library as a dependency to your project.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install injectivejs
```

----------------------------------------

TITLE: Broadcasting Cosmos SDK Message (JS)
DESCRIPTION: Shows how to construct a Cosmos SDK message (specifically `MsgSend`) and broadcast it using the initialized `signingClient`. It includes defining the message structure, fee details, and calling the `signAndBroadcast` method.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_27

LANGUAGE: js
CODE:
```
const msg = {
  typeUrl: MsgSend.typeUrl,
  value: MsgSend.fromPartial({
    amount: [
      {
        denom: "uatom",
        amount: "1000",
      },
    ],
    toAddress: address,
    fromAddress: address,
  }),
};

const fee: StdFee = {
  amount: [
    {
      denom: "uatom",
      amount: "1000",
    },
  ],
  gas: "86364",
};
const response = await signingClient.signAndBroadcast(address, [msg], fee);
```

----------------------------------------

TITLE: Create Secp256k1 Auth from Mnemonic and Sign (TypeScript)
DESCRIPTION: Demonstrates how to import the Secp256k1Auth class, create an authentication instance from a generated mnemonic and a specific HD path, sign a sample byte array, and print the resulting signature in hexadecimal format.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/auth/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { Secp256k1Auth } from "@interchainjs/auth/secp256k1";

const [directAuth] = Secp256k1Auth.fromMnemonic(generateMnemonic(), [
  "m/44'/118'/0'/0/0",
]);
const signature = auth.sign(Uint8Array.from([1, 2, 3]));
console.log(signature.toHex());
```

----------------------------------------

TITLE: Using Tree Shakable Query Helper (getAllBalances) (JavaScript)
DESCRIPTION: This JavaScript example illustrates the use of a tree shakable query helper function (getAllBalances) from InterchainJS. It shows importing only the required function and then calling it with the RPC endpoint and query parameters to retrieve data, demonstrating how this pattern optimizes bundle size and enables lazy initialization.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_4

LANGUAGE: js
CODE:
```
// Import only what you need
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// Now you can query the blockchain
const balance = await getAllBalances(endpoint, {
  address: "cosmos1addresshere",
});
```

----------------------------------------

TITLE: Using SignerFromPrivateKey Methods (TypeScript)
DESCRIPTION: Demonstrates how to retrieve the signer's address, current balance, and transaction count (nonce). It also shows sending both legacy and EIP-1559 transactions with automatic gas limit/settings and signing/verifying a personal message. Requires an initialized `SignerFromPrivateKey` instance.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// Get the address and current balance
type Address = string
const address: Address = signer.getAddress()
console.log("Address:", address)

const balance: bigint = await signer.getBalance()
console.log("Balance (wei):", balance)

// Get the current nonce
const nonce: number = await signer.getNonce()
console.log("Nonce:", nonce)

// Send a legacy transaction with automatic gas limit
const { txHash: legacyHash, wait: legacyWait } = await signer.sendLegacyTransactionAutoGasLimit(
  recipientAddress,
  1000000000000000n, // 0.001 ETH
  '0x'
)
const legacyReceipt = await legacyWait()
console.log("Legacy tx receipt:", legacyReceipt)

// Send an EIP-1559 transaction with automatic gas settings
const { txHash: eipHash, wait: eipWait } = await signer.sendEIP1559TransactionAutoGasLimit(
  recipientAddress,
  1000000000000000n // 0.001 ETH
)
const eipReceipt = await eipWait()
console.log("EIP-1559 tx receipt:", eipReceipt)

// Sign and verify a personal message
const message: string = "Hello, Ethereum!"
const signature: string = signer.personalSign(message)
console.log("Signature:", signature)

const isValid: boolean = SignerFromPrivateKey.verifyPersonalSignature(
  message,
  signature,
  address
)
console.log("Signature valid:", isValid)
}
```

----------------------------------------

TITLE: Importing Cosmos Message Composers (JS)
DESCRIPTION: Imports message composer functions for various Cosmos modules (distribution, bank, staking, governance) from the 'injective-vue' library, providing convenient methods to create messages for these modules.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_11

LANGUAGE: js
CODE:
```
import { cosmos } from "injective-vue";

const {
  fundCommunityPool,
  setWithdrawAddress,
  withdrawDelegatorReward,
  withdrawValidatorCommission,
} = cosmos.distribution.v1beta1.MessageComposer.fromPartial;

const { multiSend, send } = cosmos.bank.v1beta1.MessageComposer.fromPartial;

const {
  beginRedelegate,
  createValidator,
  delegate,
  editValidator,
  undelegate,
} = cosmos.staking.v1beta1.MessageComposer.fromPartial;

const { deposit, submitProposal, vote, voteWeighted } =
  cosmos.gov.v1beta1.MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Using Cosmos SigningClient with registry
DESCRIPTION: Example demonstrating how to connect to a Cosmos RPC endpoint using `SigningClient.connectWithSigner`, providing a signer and manually registering message types (like MsgDelegate, MsgSend) in the registry option. It then shows how to sign and broadcast a transaction message array and log the transaction hash.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client';

const signingClient = await CosmosSigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new DirectGenericOfflineSigner(directSigner),
  {
    registry: [
      // as many as possible encoders registered here.
      MsgDelegate,
      MsgSend,
    ],
    broadcast: {
      checkTx: true,
    },
  }
);

// sign and broadcast
const result = await signingClient.signAndBroadcast(<MESSAGE>[]);
console.log(result.hash); // the hash of TxRaw
```

----------------------------------------

TITLE: Defining Auth and Wallet Interfaces with Sign Methods (TypeScript)
DESCRIPTION: Defines the TypeScript interfaces for `Auth` and `Wallet`. The `Auth` interface includes a generic `sign` method for binary data, while the `Wallet` interface provides specific asynchronous methods (`signDirect`, `signAmino`) for signing structured Cosmos transaction documents, catering to different signing requirements, especially for Web3 wallets.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/auth.md#_snippet_1

LANGUAGE: typescript
CODE:
```
/** you can import { Auth, Wallet } from "@interchainjs/types" */

export interface Auth {
  ...,
  sign: (data: Uint8Array) => Signature;
}

export interface Wallet<Account, SignDoc> {
  ...,
  async signDirect(
    signerAddress: string,
    signDoc: CosmosDirectDoc
  ): Promise<DirectSignResponse>;
  async signAmino(
    signerAddress: string,
    signDoc: CosmosAminoDoc
  ): Promise<AminoSignResponse>;
}
```

----------------------------------------

TITLE: Using DirectSigner for Signing and Broadcasting Transactions (TypeScript)
DESCRIPTION: Demonstrates how to initialize and use the DirectSigner from @interchainjs/injective to sign and broadcast transactions. Requires constructing AUTH and ENCODERs separately and currently only supports RPC endpoints.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { DirectSigner } from "@interchainjs/injective/signers/direct";

const signer = new DirectSigner(<AUTH>, <ENCODER>[], <RPC_ENDPOINT>); // **ONLY** rpc endpoint is supported for now
const result = await signer.signAndBroadcast(<MESSAGE>[]);
console.log(result.hash); // the hash of TxRaw
```

----------------------------------------

TITLE: Fetching Balance with useGetBalance Hook (TS)
DESCRIPTION: Illustrates how to use the useGetBalance React hook from @interchainjs/react/cosmos/bank/v1beta1/query.rpc.react to fetch an account's balance. It shows hook initialization with options like context, enabled state, select function, and client resolver. Requires @tanstack/react-query.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Import only what you need
import { defaultContext } from "@tanstack/react-query";
import { useGetBalance } from "@interchainjs/react/cosmos/bank/v1beta1/query.rpc.react";

// Initialize RPC endpoint and address
const { rpcEndpoint } =
  useQueryHooks(defaultChainName, {
    context: defaultContext,
    enabled: !!address,
  });

//Now you can get balance by tree shakable hooks
const balanceRes = useGetBalance({
  request: {
    address: address || '',
    denom: 'osmo'
  },
  options: {
    context: defaultContext,
    enabled: !!address && !!rpcEndpoint,
    select: ({ balance }) => balance?.amount,
    staleTime: 0
  },
  clientResolver: rpcEndpoint
})

const balance = balanceRes?.data
```

----------------------------------------

TITLE: Importing IBC Transfer Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for IBC transfer messages and destructures the transfer message type.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_21

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/ibc/applications/transfer/v1/tx.registry";

const { transfer } = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Tree Shakable Transaction Helper (createDelegate) (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to import a specific tree shakable transaction helper function (createDelegate) from the InterchainJS Cosmos staking module. This follows the factory pattern for transaction helpers, enabling developers to selectively import and use functions for broadcasting transactions, optimizing bundle size via tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_6

LANGUAGE: js
CODE:
```
import { createDelegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Composing IBC Transfer Messages (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the IBC Transfer module and destructures the `transfer` message creation function using `withTypeUrl`. This is used for building IBC transfer transaction messages.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_20

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/ibc/applications/transfer/v1/tx.registry";

const { transfer } = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Monitoring Contract Events via WebSocket (TypeScript)
DESCRIPTION: Sets up a WebSocket connection to monitor events emitted by a specific smart contract. It uses `WebSocketContractMonitor` to connect to a WebSocket URL and listen for 'Transfer' events, logging them when received. Requires `@interchainjs/ethereum`, the contract address, ABI, and a WebSocket endpoint URL.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_6

LANGUAGE: TypeScript
CODE:
```
// Monitor contract events via WebSocket
import { WebSocketContractMonitor } from "@interchainjs/ethereum/providers/WebSocketContractMonitor"
const wsUrl = 'ws://127.0.0.1:8546'
const monitor = new WebSocketContractMonitor(contractAddress, abi, wsUrl)
await monitor.connect()
monitor.on('Transfer', (event) => {
  console.log('Transfer event:', event)
})
```

----------------------------------------

TITLE: Broadcasting Cosmos Message (interchainjs, JS)
DESCRIPTION: Constructs a `MsgSend` message and a standard fee object, then uses the `signingClient` to sign and broadcast the transaction to the blockchain. Requires a configured `signingClient` and valid message/fee structures.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_26

LANGUAGE: js
CODE:
```
const msg = {
  typeUrl: MsgSend.typeUrl,
  value: MsgSend.fromPartial({
    amount: [
      {
        denom: "inj",
        amount: "1000",
      },
    ],
    toAddress: address,
    fromAddress: address,
  }),
};

const fee: StdFee = {
  amount: [
    {
      denom: "inj",
      amount: "864",
    },
  ],
  gas: "86364",
};
const response = await signingClient.signAndBroadcast(address, [msg], fee);
```

----------------------------------------

TITLE: Importing Exchange Message Composer Functions (JavaScript)
DESCRIPTION: Imports the `MessageComposer` for the Injective Exchange module from `injectivejs` and extracts a comprehensive set of message creation functions using `withTypeUrl` for composing various exchange transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_15

LANGUAGE: javascript
CODE:
```
import { MessageComposer } from "injectivejs/injective/exchange/v1beta1/tx.registry";

const {
  adminUpdateBinaryOptionsMarket,
  batchCancelBinaryOptionsOrders,
  batchCancelDerivativeOrders,
  batchCancelSpotOrders,
  batchCreateDerivativeLimitOrders,
  batchCreateSpotLimitOrders,
  batchUpdateOrders,
  cancelBinaryOptionsOrder,
  cancelDerivativeOrder,
  cancelSpotOrder,
  createBinaryOptionsLimitOrder,
  createBinaryOptionsMarketOrder,
  createDerivativeLimitOrder,
  createDerivativeMarketOrder,
  createSpotLimitOrder,
  createSpotMarketOrder,
  deposit,
  exec,
  externalTransfer,
  increasePositionMargin,
  instantBinaryOptionsMarketLaunch,
  instantExpiryFuturesMarketLaunch,
  instantPerpetualMarketLaunch,
  instantSpotMarketLaunch,
  liquidatePosition,
  rewardsOptOut,
  subaccountTransfer,
  withdraw,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing IBC Transfer Message Composer (JS)
DESCRIPTION: Shows how to import the `transfer` message composer function for initiating IBC token transfers using `ibc.applications.transfer.v1.MessageComposer.withTypeUrl` from `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_10

LANGUAGE: js
CODE:
```
import { ibc } from "injective-vue";

const { transfer } = ibc.applications.transfer.v1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Sending EIP-1559 Transaction with Private Key Signer (TypeScript)
DESCRIPTION: Initializes a signer using a private key and RPC URL, then sends an EIP-1559 transaction with automatic gas limit calculation to a specified recipient and amount. It waits for the transaction receipt. Requires `@interchainjs/ethereum` and a valid private key/RPC URL.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { SignerFromPrivateKey } from "@interchainjs/ethereum/signers/SignerFromPrivateKey"
const signer = new SignerFromPrivateKey(privateKey, RPC_URL)
const { txHash, wait } = await signer.sendEIP1559TransactionAutoGasLimit(
  recipientAddress,
  amount
)
const receipt = await wait()
```

----------------------------------------

TITLE: Vue Composable for Querying Balances - InterchainJS
DESCRIPTION: Shows how to import and use a Vue composable provided by `@interchainjs/vue` to query all balances from the Cosmos Bank module.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_9

LANGUAGE: js
CODE:
```
import { useGetAllBalances } from "@interchainjs/vue/cosmos/bank/v1beta1/query.rpc.vue";
```

----------------------------------------

TITLE: Importing Exchange Message Composer Functions (JavaScript)
DESCRIPTION: Imports the `MessageComposer` for the Injective Exchange module from `injectivejs` and extracts specific message creation functions using `withTypeUrl` for composing transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_13

LANGUAGE: javascript
CODE:
```
import { MessageComposer } from "injectivejs/injective/exchange/v1beta1/tx.registry";

const { createSpotLimitOrder, createSpotMarketOrder, deposit } =
  MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Composing Exchange Messages Example (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the Injective Exchange module and destructures specific message creation functions (`createSpotLimitOrder`, `createSpotMarketOrder`, `deposit`) using `withTypeUrl`. This is used for building transaction messages.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_12

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/exchange/v1beta1/tx.registry";

const { createSpotLimitOrder, createSpotMarketOrder, deposit } =
  MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: React Hook for Querying Balances - InterchainJS
DESCRIPTION: Shows how to import and use a React hook provided by `@interchainjs/react` to query all balances from the Cosmos Bank module.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_8

LANGUAGE: js
CODE:
```
import { useGetAllBalances } from "@interchainjs/react/cosmos/bank/v1beta1/query.rpc.react";
```

----------------------------------------

TITLE: Defining Eip712Signer Class (TypeScript)
DESCRIPTION: Starts the definition of the `Eip712Signer` class, which implements the `UniEip712Signer` interface for signing and broadcasting Ethereum transactions using EIP-712. It outlines the constructor parameters (`auth`, `endpoint`) and properties (`provider`, `docAuth`), and includes a static factory method `fromWallet`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Auth } from "@interchainjs/types";
import { Provider } from "ethers";
import { IEthereumGenericOfflineSigner } from "./wallet";
import { UniEip712Signer } from "./types";
import { Eip712DocAuth } from "./auth";

export class Eip712Signer implements UniEip712Signer {
  provider: Provider;
  docAuth: Eip712DocAuth;

  constructor(auth: Auth, endpoint: string) {
    // ... constructor logic ...
  }

  static async fromWallet(signer: IEthereumGenericOfflineSigner, endpoint?: string) {
    // ... static method logic ...
  }

  // ... other methods (sign, broadcast, etc.) ...
}
```

----------------------------------------

TITLE: Using React Hooks for Staking Queries and Transactions
DESCRIPTION: Illustrates the usage of `useGetValidators` for fetching validator data and `useDelegate` for performing a delegation transaction, leveraging `react-query` hooks.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_2

LANGUAGE: js
CODE:
```
import { useDelegate } from "injective-react/cosmos/staking/v1beta1/tx.rpc.react";
import { useGetValidators } from "injective-react/cosmos/staking/v1beta1/query.rpc.react";

const {
  data,
  isSuccess: isGetValidatorsDone,
  isLoading: isGetValidatorsLoading,
} = useGetValidators({
  request: {
    status: "BOND_STATUS_BONDED",
  },
  options: {
    context: defaultContext,
    enabled: !validatorAddress,
  },
  rpcClient,
});

const { mutate: delegate, isSuccess: isDelegateSuccess } = useDelegate({
  clientResolver: signingClient,
  options: {
    context: defaultContext,
    onSuccess: (data: any) => {
      console.log("onSuccess", data);
    },
    onError: (error) => {
      console.log("onError", error);
    },
  },
});
```

----------------------------------------

TITLE: Estimating Transaction Gas with Private Key Signer (TypeScript)
DESCRIPTION: Uses the signer to estimate the gas required for a potential transaction to a recipient with a specific value and optional data. This helps determine the cost before sending the transaction. Requires an initialized `SignerFromPrivateKey` instance.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
// Estimate gas for an arbitrary transaction
const estimatedGas: bigint = await signer.estimateGas(
  recipientAddress,
  500000000000000000n, // 0.5 ETH
  '0x'               // optional data
)
console.log('Estimated gas:', estimatedGas.toString())
```

----------------------------------------

TITLE: Querying Balances with getAllBalances Helper (JS)
DESCRIPTION: Shows how to import the getAllBalances function from @interchainjs/cosmos/bank/v1beta1/query.rpc.func and use it to query account balances on the blockchain by providing an endpoint and address.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Import only what you need
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// Now you can query the blockchain
const balance = await getAllBalances(endpoint, {
  address: "cosmos1addresshere"
});
```

----------------------------------------

TITLE: Importing IBC Transfer Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the IBC Transfer module from the `@interchainjs/ibc/applications/transfer/v1` package. These helpers are used for querying transfer-related information and initiating IBC token transfers.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_25

LANGUAGE: js
CODE:
```
// query helpers
import {
  getParams,
  getDenomHash,
  getEscrowAddress,
  getTotalEscrowForDenom,
} from "@interchainjs/ibc/applications/transfer/v1/query.rpc.func";

// tx helpers
import {
  transfer,
  updateParams,
} from "@interchainjs/ibc/applications/transfer/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Creating and Using Injective RPC Query Client (JS)
DESCRIPTION: Demonstrates how to initialize an RPC query client using `injective-vue` and perform queries against both Cosmos SDK modules (like bank) and Injective-specific modules (like exchange). Requires an RPC endpoint.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_1

LANGUAGE: js
CODE:
```
import { injective } from "injective-vue";

const { createRPCQueryClient } = injective.ClientFactory;
const client = await createRPCQueryClient({ rpcEndpoint: RPC_ENDPOINT });

// now you can query the cosmos modules
const balance = await client.cosmos.bank.v1beta1.allBalances({
  address: "inj1addresshere",
});

// you can also query the injective modules
const balances = await client.injective.exchange.v1beta1.exchangeBalances();
```

----------------------------------------

TITLE: Querying Chain Data using InjectiveJS RPC Clients
DESCRIPTION: This snippet shows how to import and use RPC client functions from InjectiveJS to query data from the Injective chain. It demonstrates fetching all balances for an address and exchange balances by first obtaining the RPC endpoint.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { getAllBalances } from "injectivejs/cosmos/bank/v1beta1/query.rpc.func";
import { getExchangeBalances } from "injectivejs/injective/exchange/v1beta1/query.rpc.func";

{ getRpcEndpoint } = useChain("injective");

const endpoint = await getRpcEndpoint();

// now you can query the cosmos modules
const balance = await getAllBalances(endpoint, {
  address: "inj1addresshere",
});

const exchangeBalance = await getExchangeBalances(endpoint, {});
```

----------------------------------------

TITLE: Importing General Transaction Helper Functions
DESCRIPTION: This snippet shows example imports for general transaction helper functions available in the InjectiveJS library, specifically from the exchange module. These functions are used to construct, sign, and broadcast transaction messages.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import {
  createDeposit,
  createLiquidatePosition,
  createActivateStakeGrant,
} from "injectivejs/injective/exchange/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Composing Exchange Messages Full List (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the Injective Exchange module and destructures a comprehensive list of message creation functions using `withTypeUrl`. These functions cover various exchange operations like order creation, cancellation, batch operations, transfers, etc.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_14

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/exchange/v1beta1/tx.registry";

const {
  adminUpdateBinaryOptionsMarket,
  batchCancelBinaryOptionsOrders,
  batchCancelDerivativeOrders,
  batchCancelSpotOrders,
  batchCreateDerivativeLimitOrders,
  batchCreateSpotLimitOrders,
  batchUpdateOrders,
  cancelBinaryOptionsOrder,
  cancelDerivativeOrder,
  cancelSpotOrder,
  createBinaryOptionsLimitOrder,
  createBinaryOptionsMarketOrder,
  createDerivativeLimitOrder,
  createDerivativeMarketOrder,
  createSpotLimitOrder,
  createSpotMarketOrder,
  deposit,
  exec,
  externalTransfer,
  increasePositionMargin,
  instantBinaryOptionsMarketLaunch,
  instantExpiryFuturesMarketLaunch,
  instantPerpetualMarketLaunch,
  instantSpotMarketLaunch,
  liquidatePosition,
  rewardsOptOut,
  subaccountTransfer,
  withdraw,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Combining Query and Transaction Helpers (Staking) - InterchainJS
DESCRIPTION: Demonstrates how to use both query and transaction helpers from InterchainJS for a staking operation. It shows importing specific helpers, querying validator information, and then executing a delegation transaction.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_7

LANGUAGE: js
CODE:
```
// Import helpers
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";

// Query validator info
const { validator } = await getValidator(endpoint, {
  validatorAddr: "cosmosvaloper1...",
});

// Execute delegation
const result = await delegate(
  signingClient,
  signerAddress,
  {
    delegatorAddress: signerAddress,
    validatorAddress: validator.operatorAddress,
    amount: { denom: "uatom", amount: "1000000" },
  },
  fee,
  "Delegation via InterchainJS"
);
```

----------------------------------------

TITLE: Converting Bech32 and Hex Addresses in JavaScript
DESCRIPTION: This snippet demonstrates converting a hex string representation of an address to a bech32 string using `toBech32` and `fromHex`, and converting a bech32 string back to its hex representation using `fromBech32` and `toHex`. It shows the round trip conversion process.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/encoding/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
>> toBech32("tiov", fromHex("1234ABCD0000AA0000FFFF0000AA00001234ABCD"))
'tiov1zg62hngqqz4qqq8lluqqp2sqqqfrf27dzrrmea'
>> toHex(fromBech32("tiov1zg62hngqqz4qqq8lluqqp2sqqqfrf27dzrrmea").data)
'1234abcd0000aa0000ffff0000aa00001234abcd'
```

----------------------------------------

TITLE: Bank Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Bank module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_11

LANGUAGE: js
CODE:
```
// query helpers
import {
  getAllBalances,
  getDenomMetadata,
  getSupply,
  getParams,
} from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// tx helpers
import {
  send,
  multiSend,
} from "@interchainjs/cosmos/bank/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing CosmWasm Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the CosmWasm module from the `@interchainjs/cosmwasm/wasm/v1` package. These helpers facilitate interacting with smart contracts, including querying state and executing transactions like storing, instantiating, and migrating code.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_24

LANGUAGE: js
CODE:
```
// query helpers
import {
  getContractInfo,
  getContractHistory,
  getContractsByCode,
  getAllContractState,
  getRawContractState,
  getSmartContractState,
  getCode,
  getCodes,
} from "@interchainjs/cosmwasm/wasm/v1/query.rpc.func";

// tx helpers
import {
  storeCode,
  instantiateContract,
  migrateContract,
  updateAdmin,
  clearAdmin,
} from "@interchainjs/cosmwasm/wasm/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Implementing ByteAuth with Secp256k1 - TypeScript
DESCRIPTION: Shows a placeholder for implementing the ByteAuth interface using the secp256k1 algorithm, suitable for signing arbitrary byte arrays.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export class Secp256k1Auth implements ByteAuth<RecoveredSignatureType> {
  // Implementation details...
}
```

----------------------------------------

TITLE: Importing CosmWasm Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for CosmWasm messages and destructures common message types for easy access.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_20

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmwasm/wasm/v1/tx.registry";

const {
  clearAdmin,
  executeContract,
  instantiateContract,
  migrateContract,
  storeCode,
  updateAdmin,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Exchange Message Composers (JS)
DESCRIPTION: Shows how to import specific message composer functions for the Injective exchange module using `injective.exchange.v1beta1.MessageComposer.withTypeUrl` from the `injective-vue` library.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_2

LANGUAGE: js
CODE:
```
import { injective } from "injective-vue";

const { createSpotLimitOrder, createSpotMarketOrder, deposit } =
  injective.exchange.v1beta1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Combining InterchainJS Query and Transaction Helpers (JS)
DESCRIPTION: Provides an example of using both query (`getValidator`) and transaction (`delegate`) helpers together in a staking scenario. It shows querying validator information first and then using that information to construct and execute a delegation transaction. Requires an endpoint, signing client, signer address, and fee.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_4

LANGUAGE: js
CODE:
```
// Import helpers
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";

// Query validator info
const { validator } = await getValidator(endpoint, {
  validatorAddr: "cosmosvaloper1...",
});

// Execute delegation
const result = await delegate(
  singingClient,
  signerAddress,
  {
    delegatorAddress: signerAddress,
    validatorAddress: validator.operatorAddress,
    amount: { denom: "uatom", amount: "1000000" },
  },
  fee,
  "Delegation via InterchainJS"
);
```

----------------------------------------

TITLE: Composing CosmWasm Messages (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the CosmWasm module and destructures message creation functions using `withTypeUrl`. These are used for building transaction messages for interacting with CosmWasm contracts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_19

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmwasm/wasm/v1/tx.registry";

const {
  clearAdmin,
  executeContract,
  instantiateContract,
  migrateContract,
  storeCode,
  updateAdmin,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing CosmWasm RPC Functions (injectivejs) - JS
DESCRIPTION: Imports specific RPC functions for interacting with CosmWasm contracts on Injective using the `injectivejs` library. These functions cover operations like storing, instantiating, executing, and migrating contracts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_9

LANGUAGE: js
CODE:
```
import {
  executeContract,
  clearAdmin,
  instantiateContract,
  instantiateContract2,
  migrateContract,
  pinCodes,
  removeCodeUploadParamsAddresses,
  storeAndInstantiateContract,
  storeCode,
  sudoContract,
  unpinCodes,
  updateAdmin,
  updateContractLabel,
  updateInstantiateConfig,
  addCodeUploadParamsAddresses,
  storeAndMigrateContract,
} from "injectivejs/cosmwasm/wasm/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Staking Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the Cosmos SDK Staking module from the `@interchainjs/cosmos/staking/v1beta1` package. These helpers enable querying staking information and performing staking operations like delegation and validation.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_22

LANGUAGE: js
CODE:
```
// query helpers
import {
  getValidators,
  getValidator,
  getValidatorDelegations,
  getValidatorUnbondingDelegations,
  getDelegation,
  getUnbondingDelegation,
} from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";

// tx helpers
import {
  createValidator,
  editValidator,
  delegate,
  undelegate,
  redelegate,
} from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Defining UniEip712Signer Interface (TypeScript)
DESCRIPTION: Defines the `UniEip712Signer` interface by extending `UniSigner` and specifying the types used for EIP-712 signing, including transaction requests, serialized transactions, sign documents, addresses, broadcast responses, broadcast options, and sign document responses.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { UniSigner } from "@interchainjs/types";
import { TransactionRequest, TransactionResponse } from "ethers";

export type UniEip712Signer = UniSigner<
  TransactionRequest,
  string,
  TransactionRequest,
  string,
  TransactionResponse,
  unknown,
  string
>;
```

----------------------------------------

TITLE: Implementing EIP-712 Signer Class in TypeScript
DESCRIPTION: This class implements the `UniEip712Signer` interface to provide methods for signing and broadcasting Ethereum transactions using the EIP-712 standard. It utilizes an `Eip712DocAuth` instance for signing and an Ethers `Provider` for broadcasting. It includes methods for getting the address, signing documents, signing and broadcasting, and broadcasting signed transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import {
  IKey,
  SignDocResponse,
  SignResponse,
  BroadcastOptions,
  Auth,
  isDocAuth,
  HttpEndpoint,
} from "@interchainjs/types";
import {
  JsonRpcProvider,
  Provider,
  TransactionRequest,
  TransactionResponse,
} from "ethers";
import { UniEip712Signer } from "../types";
import { Eip712DocAuth } from "../types/docAuth";
import { IEthereumGenericOfflineSigner } from "../types/wallet";

// Eip712Signer Class: Implements the UniEip712Signer interface to handle signing and broadcasting Ethereum transactions using EIP-712.
export class Eip712Signer implements UniEip712Signer {
  provider: Provider;
  docAuth: Eip712DocAuth;

  // Constructor: Initializes the provider and docAuth properties.
  constructor(auth: Auth, public endpoint: string) {
    this.provider = new JsonRpcProvider(endpoint);
    this.docAuth = auth as Eip712DocAuth;
  }

  // Creates an Eip712Signer from a wallet.
  // If there are multiple accounts in the wallet, it will return the first one by default.
  static async fromWallet(
    signer: IEthereumGenericOfflineSigner,
    endpoint?: string
  ) {
    const auth = await Eip712DocAuth.fromOfflineSigner(signer);

    return new Eip712Signer(auth, endpoint);
  }

  // Retrieves the Ethereum address from the docAuth instance.
  async getAddress(): Promise<string> {
    return this.docAuth.address;
  }

  // Not supported in this implementation; throws an error.
  signArbitrary(data: Uint8Array): IKey | Promise<IKey> {
    throw new Error("Method not supported.");
  }

  // Uses docAuth.signDoc to sign the TransactionRequest document.
  async signDoc(doc: TransactionRequest): Promise<string> {
    return this.docAuth.signDoc(doc);
  }

  // Not supported in this implementation; throws an error.
  broadcastArbitrary(
    data: Uint8Array,
    options?: unknown
  ): Promise<TransactionResponse> {
    throw new Error("Method not supported.");
  }

  // Calls signDoc to get the signed transaction (tx).
  // Returns a SignResponse object containing the signed transaction, original document, and a broadcast function.
  async sign(
    args: TransactionRequest
  ): Promise<
    SignResponse<
      string,
      TransactionRequest,
      TransactionResponse,
      BroadcastOptions
    >
  > {
    const result = await this.signDoc(args);

    return {
      tx: result,
      doc: args,
      broadcast: async () => {
        return this.provider.broadcastTransaction(result);
      },
    };
  }

  // Calls signDoc to sign the transaction and broadcasts it using provider.broadcastTransaction.
  async signAndBroadcast(
    args: TransactionRequest
  ): Promise<TransactionResponse> {
    const result = await this.signDoc(args);

    return this.provider.broadcastTransaction(result);
  }

  // Broadcasts a signed transaction (hex string) using provider.broadcastTransaction.
  broadcast(tx: string): Promise<TransactionResponse> {
    return this.provider.broadcastTransaction(tx);
  }
}
```

----------------------------------------

TITLE: Importing NFT Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the Cosmos SDK NFT module from the `@interchainjs/cosmos/nft/v1` package. These helpers are used for querying NFT data and sending NFT-related transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_21

LANGUAGE: js
CODE:
```
// query helpers
import {
  getBalance,
  getOwner,
  getClass,
  getClasses,
  getNFTs,
  getNFT,
} from "@interchainjs/cosmos/nft/v1/query.rpc.func";

// tx helpers
import { send } from "@interchainjs/cosmos/nft/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Authz Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Authz module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_10

LANGUAGE: js
CODE:
```
// query helpers
import {
  getGrants,
  getGranterGrants,
  getGranteeGrants,
} from "@interchainjs/cosmos/authz/v1beta1/query.rpc.func";

// tx helpers
import {
  grant,
  revoke,
  exec,
} from "@interchainjs/cosmos/authz/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Accessing Cosmos Distribution Messages (injectivejs, JS)
DESCRIPTION: Imports and destructures message composer functions for Cosmos distribution module messages (e.g., fundCommunityPool, withdrawDelegatorReward) from `injectivejs`. Requires `injectivejs` dependency.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_21

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/distribution/v1beta1/tx.registry";

const {
  fundCommunityPool,
  setWithdrawAddress,
  withdrawDelegatorReward,
  withdrawValidatorCommission,
} = MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Accessing Cosmos Governance Messages (injectivejs, JS)
DESCRIPTION: Imports and destructures message composer functions for Cosmos governance module messages (e.g., submitProposal, vote) from `injectivejs`. Requires `injectivejs` dependency.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_24

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/gov/v1beta1/tx.registry";

const { deposit, submitProposal, vote, voteWeighted } =
  cosmos.gov.v1beta1.MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Importing Cosmos SDK RPC Functions (JavaScript)
DESCRIPTION: Imports various RPC functions from the `injectivejs` library for interacting with core Cosmos SDK modules like distribution, bank, staking, and governance.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_12

LANGUAGE: javascript
CODE:
```
import {
  fundCommunityPool,
  communityPoolSpend,
  depositValidatorRewardsPool,
} from "injectivejs/cosmos/distribution/v1beta1/tx.rpc.func";

import {
  send,
  multiSend,
} from "injectivejs/cosmos/bank/v1beta1/tx.rpc.func";

import {
  delegate,
  undelegate,
  cancelUnbondingDelegation,
  createValidator,
} from "injectivejs/cosmos/staking/v1beta1/tx.rpc.func";

import {
  deposit,
  submitProposal,
  vote,
  voteWeighted,
} from "injectivejs/cosmos/gov/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Tree Shakable Query Helper (getValidator) (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to import a specific tree shakable query helper function (getValidator) from the InterchainJS Cosmos staking module. This pattern allows developers to include only the necessary query functionality in their application bundle, contributing to optimization through tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_5

LANGUAGE: js
CODE:
```
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
```

----------------------------------------

TITLE: Implementing the AminoSigner Class - TypeScript
DESCRIPTION: Provides the structure for the AminoSigner class, which extends AminoSignerBase and implements CosmosAminoSigner. It shows how the signer is initiated, how to get the transaction builder, how to get account information, and a static method for creating the signer from a wallet.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export class AminoSigner
  extends AminoSignerBase<CosmosAminoDoc>
  implements CosmosAminoSigner
{
  // Initiated by an Auth, ByteAuth, or DocAuth
  constructor(
    auth: Auth,
    encoders: Encoder[],
    converters: AminoConverter[],
    endpoint?: string | HttpEndpoint,
    options?: SignerOptions
  ) {
    super(auth, encoders, converters, endpoint, options);
  }

  // Get the transaction builder
  getTxBuilder(): BaseCosmosTxBuilder<CosmosAminoDoc> {
    return new AminoTxBuilder(new BaseCosmosTxBuilderContext(this));
  }

  // Get account information
  async getAccount() {
    // Implementation details...
  }

  // Create AminoSigner from a wallet (returns the first account by default)
  static async fromWallet(
    signer: OfflineAminoSigner | IAminoGenericOfflineSigner,
  )
```

----------------------------------------

TITLE: Importing IBC Transfer RPC Function (JavaScript)
DESCRIPTION: Imports the RPC function from the `injectivejs` library specifically for initiating IBC transfers between chains.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
import { transfer } from "injectivejs/ibc/applications/transfer/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Gov Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Gov module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_18

LANGUAGE: js
CODE:
```
// query helpers
import {
  getProposal,
  getProposals,
  getVote,
  getVotes,
  getParams,
  getDeposit,
  getDeposits,
  getTallyResult,
} from "@interchainjs/cosmos/gov/v1beta1/query.rpc.func";

// tx helpers
import {
  submitProposal,
  deposit,
  vote,
  voteWeighted,
} from "@interchainjs/cosmos/gov/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Cosmos Gov Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for Cosmos governance messages and destructures common message types.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_25

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/gov/v1beta1/tx.registry";

const { deposit, submitProposal, vote, voteWeighted } =
  cosmos.gov.v1beta1.MessageComposer.fromPartial;
```

----------------------------------------

TITLE: CosmJS Transaction Signing and Broadcasting (TypeScript)
DESCRIPTION: Demonstrates signing and broadcasting a transaction using CosmJS's SigningStargateClient. It connects to an RPC endpoint with a wallet, constructs a message, defines fee and memo, and sends the transaction.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
import { SigningStargateClient } from "@cosmjs/stargate";
import { makeCosmoshubPath } from "@cosmjs/crypto";

(async () => {
  const mnemonic = "your mnemonic here";
  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
    hdPaths: [makeCosmoshubPath(0)],
  });
  const [account] = await wallet.getAccounts();
  const rpcEndpoint = 'http://your-rpc-endpoint:26657';
  const client = await SigningStargateClient.connectWithSigner(rpcEndpoint, wallet);
  
  const msg = {
    // Construct your message here
  };
  const fee = {
    amount: [{ denom: 'uatom', amount: '5000' }],
    gas: '200000',
  };
  const memo = "CosmJS transaction test";
  
  const result = await client.signAndBroadcast(account.address, [msg], fee, memo);
  console.log("Transaction hash:", result.transactionHash);
})();
```

----------------------------------------

TITLE: InterchainJS Migration Imports for Wallet Generation (TypeScript)
DESCRIPTION: Lists the necessary imports from InterchainJS modules (@interchainjs/crypto, @interchainjs/auth, @interchainjs/types) required for wallet generation when migrating from CosmJS.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Bip39, Random } from '@interchainjs/crypto';
import { Secp256k1Auth } from '@interchainjs/auth/secp256k1';
import { HDPath } from '@interchainjs/types';
```

----------------------------------------

TITLE: Implementing Eip712DocAuth Class (TypeScript)
DESCRIPTION: Implements the `Eip712DocAuth` class, extending `BaseDocAuth` to handle authentication and signing of EIP-712 documents for Ethereum. It includes a constructor, a static factory method `fromOfflineSigner`, and methods for getting public key (which throws an error as it's not needed for EIP-712) and signing documents using an offline signer.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { BaseDocAuth, IKey, SignDocResponse } from "@interchainjs/types";
import { IEthereumGenericOfflineSigner } from "./wallet";
import { TransactionRequest } from "ethers";

// Eip712DocAuth Class: Extends BaseDocAuth to provide authentication and document signing capabilities specific to EIP-712.
export class Eip712DocAuth extends BaseDocAuth<
  IEthereumGenericOfflineSigner,
  TransactionRequest,
  unknown,
  string,
  string,
  string
> {
  // Calls the parent BaseDocAuth constructor with the provided offlineSigner and address.
  constructor(
    offlineSigner: IEthereumGenericOfflineSigner,
    address: string
  ) {
    super(offlineSigner, address);
  }

  // Retrieves the accounts from the offlineSigner and creates a new instance of Eip712DocAuth with the first account's address.
  static async fromOfflineSigner(
    offlineSigner: IEthereumGenericOfflineSigner
  ) {
    const [account] = await offlineSigner.getAccounts();

    return new Eip712DocAuth(offlineSigner, account);
  }

  // Throws an error because EIP-712 does not require a public key for signing operations.
  getPublicKey(): IKey {
    throw new Error("For EIP712, public key is not needed");
  }

  // Calls the sign method of the offlineSigner to sign the TransactionRequest document and returns a promise that resolves to the signature string.
  signDoc(doc: TransactionRequest): Promise<string> {
    return this.offlineSigner.sign(doc);
  }
}
```

----------------------------------------

TITLE: Importing IBC Transfer RPC Function (injectivejs) - JS
DESCRIPTION: Imports the `transfer` RPC function specifically for initiating IBC token transfers using the `injectivejs` library.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_10

LANGUAGE: js
CODE:
```
import { transfer } from "injectivejs/ibc/applications/transfer/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Signer Types (TypeScript)
DESCRIPTION: This snippet shows the necessary TypeScript imports for the core UniSigner and BaseSigner types used within the interchainjs library for handling transaction signing.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { UniSigner } from "@interchainjs/types";
import { BaseSigner } from "@interchainjs/types";
```

----------------------------------------

TITLE: Importing InterchainJS Query Helpers (JS)
DESCRIPTION: Illustrates importing specific query helpers and hooks for staking from `@interchainjs/cosmos` and `@interchainjs/vue`. Shows the pattern for importing individual functions (`getValidator`) and hooks (`useGetValidators`) for tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_2

LANGUAGE: js
CODE:
```
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { useGetValidators } from "@interchainjs/vue/cosmos/staking/v1beta1/query.rpc.vue";
```

----------------------------------------

TITLE: Generating Wallet and Sending Transaction with InterchainJS Cosmos SDK
DESCRIPTION: Demonstrates how to generate a wallet using Bip39 and Secp256k1Auth, derive an account using HDPath, prepare encoders, create a DirectSigner instance, retrieve the wallet address, build a MsgSend transaction, and sign/broadcast it using the InterchainJS Cosmos SDK, without relying on CosmJS. Requires dependencies like @interchainjs/auth, @interchainjs/types, @interchainjs/cosmos, @interchainjs/crypto, and interchainjs/cosmos/bank.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Import wallet and HD path utilities from the SDK packages
import { Secp256k1Auth } from '@interchainjs/auth/secp256k1';
import { HDPath } from '@interchainjs/types';
// Import the DirectSigner from our SDK
import { DirectSigner } from '@interchainjs/cosmos/signers/direct';
import { Bip39, Random } from '@interchainjs/crypto';
import { toEncoders } from '@interchainjs/cosmos/utils';
import { MsgSend } from 'interchainjs/cosmos/bank/v1beta1/tx';

(async () => {
  // Generate a mnemonic using the SDK utility
  const mnemonic = Bip39.encode(Random.getBytes(16)).toString();

  // Derive authentication objects (wallet accounts) using the SDK's Secp256k1Auth
  // Here we derive the first account using the standard Cosmos HD path.
  const [auth] = Secp256k1Auth.fromMnemonic(mnemonic, [
    HDPath.cosmos(0, 0, 0).toString(),
  ]);

  // Prepare any encoders required for your message types
  const encoders:Encoder[] = toEncoders(MsgSend);

  // Define your RPC endpoint (ensure it points to a working Cosmos RPC node)
  const rpcEndpoint = 'http://your-rpc-endpoint:26657';

  // Create a DirectSigner instance using the auth object and your RPC endpoint.
  // The options object can include chain-specific settings (like the bech32 prefix).
  const signer = new DirectSigner(auth, encoders, rpcEndpoint, {
    prefix: 'cosmos', // Replace with your chain's prefix if different
  });

  // Retrieve the wallet address from the signer
  const address = await signer.getAddress();
  console.log('Wallet address:', address);

  // ----- Transaction Example -----
  // Build your transaction message (e.g., a bank MsgSend). Refer to @interchainjs/cosmos-types for details.
  const msg = {
    // Example message object; adjust fields according to your chain and message type
    // For instance, if using bank.MsgSend, you would populate:
    typeUrl: '/cosmos.bank.v1beta1.MsgSend',
    value: { fromAddress: address, toAddress: address, amount: [{ denom: 'uatom', amount: '1' }] }
  };

  // Sign and broadcast the transaction.
  // The signAndBroadcast method handles building the transaction and sending it over RPC.
  const result = await signer.signAndBroadcast([msg]);
  console.log('Transaction hash:', result.hash);
})();
```

----------------------------------------

TITLE: Distribution Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Distribution module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_15

LANGUAGE: js
CODE:
```
// query helpers
import {
  getParams,
  getValidatorDistributionInfo,
  getValidatorOutstandingRewards,
  getValidatorCommission,
  getValidatorSlashes,
  getDelegationRewards,
  getDelegationTotalRewards,
} from "@interchainjs/cosmos/distribution/v1beta1/query.rpc.func";

// tx helpers
import {
  setWithdrawAddress,
  withdrawDelegatorReward,
  withdrawValidatorCommission,
  fundCommunityPool,
  communityPoolSpend,
  updateParams,
} from "@interchainjs/cosmos/distribution/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Injective AminoSigner (JS)
DESCRIPTION: This snippet shows the standard way to import the `AminoSigner` class specifically designed for the Injective blockchain from the `@interchainjs/injective/amino` package. This class is essential for implementing transaction signing using the Amino standard.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { AminoSigner } from "@interchainjs/injective/amino"
```

----------------------------------------

TITLE: Composing Auction Messages (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the Injective Auction module and destructures the `bid` message creation function using `withTypeUrl`. This is used for building auction-related transaction messages.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_13

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/auction/v1beta1/tx.registry";

const { bid } = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing InterchainJS Transaction Helpers (JS)
DESCRIPTION: Illustrates importing specific transaction helpers and hooks for staking from `@interchainjs/cosmos` and `@interchainjs/vue`. Shows the pattern for importing individual functions (`createDelegate`) and hooks (`useDelegate`) for tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_3

LANGUAGE: js
CODE:
```
import { createDelegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
import { useDelegate } from "@interchainjs/vue/cosmos/staking/v1beta1/tx.rpc.vue";
```

----------------------------------------

TITLE: Importing Auction Transaction Helper Functions
DESCRIPTION: This snippet shows the import for the transaction helper function related to the Injective Auction module, specifically the `bid` function. These functions facilitate creating and broadcasting auction-related transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { bid } from "injectivejs/injective/auction/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Using InterchainJS AminoSigner (TypeScript)
DESCRIPTION: Demonstrates how to use the AminoSigner in InterchainJS for legacy signing compatibility. It initializes the signer with authentication details, encoders, converters, and an RPC endpoint, then signs and broadcasts a message with a specified fee.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { AminoSigner } from '@interchainjs/cosmos/signers/amino';
import { toEncoders, toConverters } from '@interchainjs/cosmos/utils';
import { MsgSend } from 'interchainjs/cosmos/bank/v1beta1/tx';

(async () => {
  const [auth] = Secp256k1Auth.fromMnemonic(mnemonic, [
    HDPath.cosmos(0, 0, 0).toString(),
  ]);
  const rpcEndpoint = 'http://your-rpc-endpoint:26657';

  // Create an AminoSigner instance
  const aminoSigner = new AminoSigner(
    auth,
    toEncoders(MsgSend),
    toConverters(MsgSend),
    rpcEndpoint,
    { prefix: 'cosmos' }
  );

  // Build your message and set fee/memo if needed
  const msg = {
    // Your message fields here
  };

  const fee = {
    amount: [
      {
        denom: 'uatom',
        amount: '5000',
      },
    ],
    gas: '200000',
  };

  const result = await aminoSigner.signAndBroadcast({
    messages: [msg], fee
  });
  console.log('Transaction hash:', result.hash);
})();
```

----------------------------------------

TITLE: Accessing Cosmos Bank Messages (injectivejs, JS)
DESCRIPTION: Imports and destructures message composer functions for Cosmos bank module messages (e.g., multiSend, send) from `injectivejs`. Requires `injectivejs` dependency.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_22

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/bank/v1beta1/tx.registry";

const { multiSend, send } = MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Importing Peggy RPC Functions (JavaScript)
DESCRIPTION: Imports RPC functions from the `injectivejs` library for interacting with the Injective Peggy module, which handles bridging assets between Injective and Ethereum.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
import {
  blacklistEthereumAddresses,
  cancelSendToEth,
  confirmBatch,
  depositClaim,
  eRC20DeployedClaim,
  requestBatch,
  revokeEthereumBlacklist,
  sendToEth,
  setOrchestratorAddresses,
  submitBadSignatureEvidence,
  valsetConfirm,
  valsetUpdateClaim,
  withdrawClaim,
} from "injectivejs/injective/peggy/v1/msgs.rpc.func";
```

----------------------------------------

TITLE: Importing Peggy Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for Injective Peggy messages and destructures common message types for easy access.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_19

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/peggy/v1/tx.registry";

const {
  cancelSendToEth,
  confirmBatch,
  depositClaim,
  eRC20DeployedClaim,
  requestBatch,
  sendToEth,
  setOrchestratorAddresses,
  submitBadSignatureEvidence,
  valsetConfirm,
  valsetUpdateClaim,
  withdrawClaim,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Exchange Transaction Helper Functions
DESCRIPTION: This snippet lists the available transaction helper functions for the Injective Exchange module. These functions cover a wide range of operations including order creation, cancellation, market management, and fund transfers.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import {
  activateStakeGrant,
  adminUpdateBinaryOptionsMarket,
  authorizeStakeGrants,
  batchCancelBinaryOptionsOrders,
  batchCancelDerivativeOrders,
  batchCancelSpotOrders,
  batchCreateDerivativeLimitOrders,
  batchCreateSpotLimitOrders,
  batchUpdateOrders,
  cancelBinaryOptionsOrder,
  cancelDerivativeOrder,
  cancelSpotOrder,
  createBinaryOptionsLimitOrder,
  createBinaryOptionsMarketOrder,
  createDerivativeLimitOrder,
  createDerivativeMarketOrder,
  createSpotLimitOrder,
  createSpotMarketOrder,
  decreasePositionMargin,
  deposit,
  emergencySettleMarket,
  externalTransfer,
  increasePositionMargin,
  instantBinaryOptionsMarketLaunch,
  instantExpiryFuturesMarketLaunch,
  instantPerpetualMarketLaunch,
  instantSpotMarketLaunch,
  liquidatePosition,
  privilegedExecuteContract,
  rewardsOptOut,
  subaccountTransfer,
  updateDerivativeMarket,
  updateParams,
  updateSpotMarket,
  withdraw,
} from "injectivejs/injective/exchange/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Installing @interchainjs/cosmos package
DESCRIPTION: Command to install the @interchainjs/cosmos package using the npm package manager.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install @interchainjs/cosmos
```

----------------------------------------

TITLE: Installing injective-vue with npm
DESCRIPTION: Provides the command-line instruction to install the injective-vue library using the npm package manager.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install injective-vue
```

----------------------------------------

TITLE: Importing Cosmos Bank Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for Cosmos bank messages and destructures multiSend and send message types.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_23

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/bank/v1beta1/tx.registry";

const { multiSend, send } = MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Installing InterchainJS Cosmos SDK Packages
DESCRIPTION: Instructions to install the necessary packages for the InterchainJS Cosmos SDK using npm, replacing previous CosmJS dependencies. This command installs the core cosmos package, authentication utilities, and cosmos type definitions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install @interchainjs/cosmos @interchainjs/auth @interchainjs/cosmos-types
```

----------------------------------------

TITLE: Importing Peggy Message Composers (JS)
DESCRIPTION: Provides a list of message composer functions available for the Injective Peggy module (Ethereum bridge), imported from `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_8

LANGUAGE: js
CODE:
```
const {
  cancelSendToEth,
  confirmBatch,
  depositClaim,
  eRC20DeployedClaim,
  requestBatch,
  sendToEth,
  setOrchestratorAddresses,
  submitBadSignatureEvidence,
  valsetConfirm,
  valsetUpdateClaim,
  withdrawClaim,
} = injective.peggy.v1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Install @interchainjs/auth Package (Shell)
DESCRIPTION: Installs the @interchainjs/auth package using npm, making it available for use in your project. This is the standard way to add the dependency.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/auth/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install @interchainjs/auth
```

----------------------------------------

TITLE: Deploying Starship on Kubernetes (TLDR)
DESCRIPTION: Provides a quick overview of the commands needed to set up dependencies, deploy the Starship environment, wait for pods to be ready, and configure port forwarding for access.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# setup helm/starship
yarn starship setup

# sanity check
yarn starship get-pods

# deploy starship
yarn starship deploy

# wait til STATUS=Running
yarn starship get-pods

# port forwarding
yarn starship start-ports

# check pids
yarn starship port-pids
```

----------------------------------------

TITLE: Subscribe to New Ethereum Heads (JSON)
DESCRIPTION: Sends a JSON-RPC request over a websocket connection to subscribe to new block headers from the Ethereum node.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_7

LANGUAGE: json
CODE:
```
{"jsonrpc": "2.0", "id": 1, "method": "eth_subscribe", "params": ["newHeads"]}
```

----------------------------------------

TITLE: Accessing Cosmos Staking Messages (injectivejs, JS)
DESCRIPTION: Imports and destructures message composer functions for Cosmos staking module messages (e.g., delegate, undelegate) from `injectivejs`. Requires `injectivejs` dependency.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_23

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/staking/v1beta1/tx.registry";

const {
  beginRedelegate,
  createValidator,
  delegate,
  editValidator,
  undelegate,
} = MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Installing @interchainjs/ethereum Package (Shell)
DESCRIPTION: Installs the `@interchainjs/ethereum` package using npm, making it available for use in a project. This is the first step to integrate the library.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install @interchainjs/ethereum
```

----------------------------------------

TITLE: Importing Oracle RPC Functions (injectivejs) - JS
DESCRIPTION: Imports specific RPC functions related to the Injective Oracle module from the `injectivejs` library. These functions are used for interacting with oracle-related operations on the chain.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_7

LANGUAGE: js
CODE:
```
import {
  relayBandRates,
  relayCoinbaseMessages,
  relayPriceFeedPrice,
  relayProviderPrices,
  relayPythPrices,
  relayStorkMessage,
  requestBandIBCRates,
} from "injectivejs/injective/oracle/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Vesting Module Helpers (JS)
DESCRIPTION: Imports transaction helper functions for the Cosmos SDK Vesting module from the `@interchainjs/cosmos/vesting/v1beta1` package. These helpers are used for creating various types of vesting accounts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_23

LANGUAGE: js
CODE:
```
// tx helpers
import {
  createVestingAccount,
  createPermanentLockedAccount,
  createPeriodicVestingAccount,
} from "@interchainjs/cosmos/vesting/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Starting Local Ethereum Node with Ganache
DESCRIPTION: Provides two alternative command-line methods for starting a local Ethereum development node using Ganache, either directly via `npx` with specified accounts or using a predefined `yarn` script. This node is required for running local tests.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/devnet/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx ganache \
  --account="0x0000000000000000000000000000000000000000000000000000000000000001,1000000000000000000" \
  --account="0x0000000000000000000000000000000000000000000000000000000000000002,1000000000000000000"
```

LANGUAGE: Shell
CODE:
```
yarn run-ganache
```

----------------------------------------

TITLE: Deploy Starship Infrastructure (Shell)
DESCRIPTION: Deploys the Starship mini-cosmos ecosystem using the specified configuration file.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
yarn starship
```

----------------------------------------

TITLE: Importing Cosmos SDK RPC Functions (injectivejs) - JS
DESCRIPTION: Imports various RPC functions from different Cosmos SDK modules (Distribution, Bank, Staking, Gov) available through the `injectivejs` library. These functions are used for standard Cosmos chain interactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_11

LANGUAGE: js
CODE:
```
import {
  fundCommunityPool,
  communityPoolSpend,
  depositValidatorRewardsPool,
} from "injectivejs/cosmos/distribution/v1beta1/tx.rpc.func";

import {
  send,
  multiSend,
} from "injectivejs/cosmos/bank/v1beta1/tx.rpc.func";

import {
  delegate,
  undelegate,
  cancelUnbondingDelegation,
  createValidator,
} from "injectivejs/cosmos/staking/v1beta1/tx.rpc.func";

import {
  deposit,
  submitProposal,
  vote,
  voteWeighted,
} from "injectivejs/cosmos/gov/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Oracle RPC Functions (JavaScript)
DESCRIPTION: Imports RPC functions from the `injectivejs` library for interacting with the Injective Oracle module, primarily for relaying price data from various sources.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
import {
  relayBandRates,
  relayCoinbaseMessages,
  relayPriceFeedPrice,
  relayProviderPrices,
  relayPythPrices,
  relayStorkMessage,
  requestBandIBCRates,
} from "injectivejs/injective/oracle/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Cosmos Distribution Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for Cosmos distribution messages and destructures common message types.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_22

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/distribution/v1beta1/tx.registry";

const {
  fundCommunityPool,
  setWithdrawAddress,
  withdrawDelegatorReward,
  withdrawValidatorCommission,
} = MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Importing Peggy RPC Functions (injectivejs) - JS
DESCRIPTION: Imports specific RPC functions related to the Injective Peggy module from the `injectivejs` library. These functions are used for interacting with the Ethereum bridge functionality.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_8

LANGUAGE: js
CODE:
```
import {
  blacklistEthereumAddresses,
  cancelSendToEth,
  confirmBatch,
  depositClaim,
  eRC20DeployedClaim,
  requestBatch,
  revokeEthereumBlacklist,
  sendToEth,
  setOrchestratorAddresses,
  submitBadSignatureEvidence,
  valsetConfirm,
  valsetUpdateClaim,
  withdrawClaim,
} from "injectivejs/injective/peggy/v1/msgs.rpc.func";
```

----------------------------------------

TITLE: Importing Cosmos Staking Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for Cosmos staking messages and destructures common message types.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_24

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/cosmos/staking/v1beta1/tx.registry";

const {
  beginRedelegate,
  createValidator,
  delegate,
  editValidator,
  undelegate,
} = MessageComposer.fromPartial;
```

----------------------------------------

TITLE: Importing CosmWasm Message Composers (JS)
DESCRIPTION: Demonstrates how to import message composer functions for interacting with CosmWasm contracts (like `executeContract`, `instantiateContract`) using the `cosmwasm.wasm.v1.MessageComposer.withTypeUrl` from `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_9

LANGUAGE: js
CODE:
```
import { cosmwasm } from "injective-vue";

const {
  clearAdmin,
  executeContract,
  instantiateContract,
  migrateContract,
  storeCode,
  updateAdmin,
} = cosmwasm.wasm.v1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Initial Project Setup and Build (Shell)
DESCRIPTION: Runs yarn to install project dependencies and then executes the development build script. This is the standard procedure after cloning the repository to prepare the project for development.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_28

LANGUAGE: Shell
CODE:
```
yarn
yarn build:dev
```

----------------------------------------

TITLE: Initial Project Setup (Shell)
DESCRIPTION: Provides the necessary shell commands to set up the project after cloning the repository. This includes installing dependencies using yarn and building the project in development mode.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_29

LANGUAGE: shell
CODE:
```
yarn
yarn build:dev
```

----------------------------------------

TITLE: Install Starship Dependencies (Bash)
DESCRIPTION: Checks for and installs necessary dependencies like kubectl, kind, and helm, and fetches the required helm charts for Starship.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
yarn starship setup
```

----------------------------------------

TITLE: Installing Starship Dependencies with Yarn
DESCRIPTION: This command automates the installation of necessary dependencies like `kubectl`, `kind`, and `helm` required to run `starship` end-to-end tests and fetches the required helm charts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
yarn starship setup
```

----------------------------------------

TITLE: Evidence Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Evidence module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_16

LANGUAGE: js
CODE:
```
// query helpers
import {
  getEvidence,
  getAllEvidence,
} from "@interchainjs/cosmos/evidence/v1beta1/query.rpc.func";

// tx helpers
import { submitEvidence } from "@interchainjs/cosmos/evidence/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Feegrant Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Feegrant module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_17

LANGUAGE: js
CODE:
```
// query helpers
import {
  getAllowance,
  getAllowances,
  getAllowancesByGranter,
} from "@interchainjs/cosmos/feegrant/v1beta1/query.rpc.func";

// tx helpers
import {
  grantAllowance,
  revokeAllowance,
  pruneAllowances,
} from "@interchainjs/cosmos/feegrant/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Installing Starship Dependencies
DESCRIPTION: Executes the `yarn starship setup` command to check for and install necessary dependencies like kubectl, kind, and helm, and fetches the required helm charts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
yarn starship setup
```

----------------------------------------

TITLE: Class Diagram for Wallet and Signers
DESCRIPTION: Illustrates the relationships between the ICosmosWallet interface, OfflineDirectSigner, OfflineAminoSigner, and the Secp256k1HDWallet implementation, showing inheritance and composition.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/wallet.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
classDiagram
    class ICosmosWallet {
        +getAccounts() Promise~AccountData[]~
    }

    class OfflineDirectSigner {
        +getAccounts() Promise~AccountData[]~
        +signDirect(signerAddress: string, signDoc: CosmosDirectDoc) Promise~DirectSignResponse~
    }

    class OfflineAminoSigner {
        +getAccounts() Promise~AccountData[]~
        +signAmino(signerAddress: string, signDoc: CosmosAminoDoc) Promise~AminoSignResponse~
    }

    class Secp256k1HDWallet {
        +accounts: ICosmosAccount[]
        +options: SignerConfig
        +getAccounts() Promise~AccountData[]~
        +signDirect(signerAddress: string, signDoc: CosmosDirectDoc) Promise~DirectSignResponse~
        +signAmino(signerAddress: string, signDoc: CosmosAminoDoc) Promise~AminoSignResponse~
        +toOfflineDirectSigner() OfflineDirectSigner
        +toOfflineAminoSigner() OfflineAminoSigner
        +fromMnemonic(mnemonic: string, derivations: AddrDerivation[], options?: WalletOptions) Secp256k1HDWallet
        -getAcctFromBech32Addr(address: string) ICosmosAccount
    }

    OfflineDirectSigner <|.. Secp256k1HDWallet
    OfflineAminoSigner <|.. Secp256k1HDWallet
    ICosmosWallet <|.. Secp256k1HDWallet

    style OfflineDirectSigner fill:#f9f,stroke:#333,stroke-width:2px
    style OfflineAminoSigner fill:#f9f,stroke:#333,stroke-width:2px
    style ICosmosWallet fill:#f9f,stroke:#333,stroke-width:2px
```

----------------------------------------

TITLE: Group Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Group module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_19

LANGUAGE: js
CODE:
```
// query helpers
import {
  getGroupInfo,
  getGroupPolicyInfo,
  getGroupMembers,
  getGroupsByAdmin,
  getGroupPoliciesByGroup,
  getGroupPoliciesByAdmin,
} from "@interchainjs/cosmos/group/v1/query.rpc.func";

// tx helpers
import {
  createGroup,
  updateGroupMetadata,
  updateGroupMembers,
  updateGroupAdmin,
  updateGroupPolicyMetadata,
  submitProposal,
  vote,
  exec,
} from "@interchainjs/cosmos/group/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing All Exchange Message Composers (JS)
DESCRIPTION: Provides a comprehensive list of message composer functions available for the Injective exchange module, imported using `injective.exchange.v1beta1.MessageComposer.withTypeUrl` from `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_4

LANGUAGE: js
CODE:
```
const {
  adminUpdateBinaryOptionsMarket,
  batchCancelBinaryOptionsOrders,
  batchCancelDerivativeOrders,
  batchCancelSpotOrders,
  batchCreateDerivativeLimitOrders,
  batchCreateSpotLimitOrders,
  batchUpdateOrders,
  cancelBinaryOptionsOrder,
  cancelDerivativeOrder,
  cancelSpotOrder,
  createBinaryOptionsLimitOrder,
  createBinaryOptionsMarketOrder,
  createDerivativeLimitOrder,
  createDerivativeMarketOrder,
  createSpotLimitOrder,
  createSpotMarketOrder,
  deposit,
  exec,
  externalTransfer,
  increasePositionMargin,
  instantBinaryOptionsMarketLaunch,
  instantExpiryFuturesMarketLaunch,
  instantPerpetualMarketLaunch,
  instantSpotMarketLaunch,
  liquidatePosition,
  rewardsOptOut,
  subaccountTransfer,
  withdraw,
} = injective.exchange.v1beta1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Composing Oracle Messages (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the Injective Oracle module and destructures message creation functions using `withTypeUrl`. These are used for building oracle-related transaction messages, such as relaying price data.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_17

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/oracle/v1beta1/tx.registry";

const {
  relayBandRates,
  relayCoinbaseMessages,
  relayPriceFeedPrice,
  relayProviderPrices,
  requestBandIBCRates,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Setting Up Local Kind Kubernetes Cluster
DESCRIPTION: Runs the `yarn starship setup-kind` command to create a local Kubernetes cluster using Kind, providing an environment for deploying Starship.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn starship setup-kind
```

----------------------------------------

TITLE: Importing OCR Message Composers (JS)
DESCRIPTION: Demonstrates how to import various message composer functions for the Injective OCR (Off-chain Reporting) module from `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_6

LANGUAGE: js
CODE:
```
const {
  acceptPayeeship,
  createFeed,
  fundFeedRewardPool,
  setPayees,
  transferPayeeship,
  transmit,
  updateFeed,
  withdrawFeedRewardPool,
} = injective.ocr.v1beta1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Deploying Starship Infrastructure with Yarn
DESCRIPTION: This command initiates the deployment of the mini-cosmos ecosystem using `starship`, utilizing the configuration defined in `configs/config.yaml`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn starship deploy
```

----------------------------------------

TITLE: Importing Insurance Message Composers (JS)
DESCRIPTION: Shows how to import message composer functions for the Injective insurance module, including `createInsuranceFund`, `requestRedemption`, and `underwrite`, from `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_5

LANGUAGE: js
CODE:
```
const { createInsuranceFund, requestRedemption, underwrite } =
  injective.insurance.v1beta1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Oracle Message Composers (JS)
DESCRIPTION: Shows how to import message composer functions related to oracle operations within the Injective oracle module using `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_7

LANGUAGE: js
CODE:
```
const {
  relayBandRates,
  relayCoinbaseMessages,
  relayPriceFeedPrice,
  relayProviderPrices,
  requestBandIBCRates,
} = injective.oracle.v1beta1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Insurance Message Composer Functions (JavaScript)
DESCRIPTION: Imports the `MessageComposer` for the Injective Insurance module from `injectivejs` and extracts message creation functions using `withTypeUrl` for composing insurance-related transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_16

LANGUAGE: javascript
CODE:
```
import { MessageComposer } from "injectivejs/injective/insurance/v1beta1/tx.registry";

const { createInsuranceFund, requestRedemption, underwrite } =
  MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Deploying Starship E2E Environment (TLDR)
DESCRIPTION: Provides a quick summary of the commands needed to set up, deploy, and verify the Starship end-to-end testing environment, including port forwarding.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
# setup helm/starship
yarn starship setup

# sanity check
yarn starship get-pods

# deploy starship
yarn starship deploy

# wait til STATUS=Running
yarn starship wait-for-pods
or
watch yarn starship get-pods

# port forwarding
yarn starship start-ports

# check pids
yarn starship port-pids
```

----------------------------------------

TITLE: Importing Insurance RPC Functions (JavaScript)
DESCRIPTION: Imports RPC functions from the `injectivejs` library for interacting with the Injective Insurance module, enabling actions like creating insurance funds, requesting redemptions, and underwriting.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import {
  createInsuranceFund,
  requestRedemption,
  underwrite,
} from "injectivejs/injective/insurance/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing CosmWasm RPC Functions (JavaScript)
DESCRIPTION: Imports RPC functions from the `injectivejs` library for interacting with the Cosmos SDK CosmWasm module, enabling smart contract deployment and execution.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
import {
  executeContract,
  clearAdmin,
  instantiateContract,
  instantiateContract2,
  migrateContract,
  pinCodes,
  removeCodeUploadParamsAddresses,
  storeAndInstantiateContract,
  storeCode,
  sudoContract,
  unpinCodes,
  updateAdmin,
  updateContractLabel,
  updateInstantiateConfig,
  addCodeUploadParamsAddresses,
  storeAndMigrateContract,
} from "injectivejs/cosmwasm/wasm/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Composing Peggy Messages (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the Injective Peggy module and destructures message creation functions using `withTypeUrl`. These are used for building transaction messages related to the Ethereum bridge.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_18

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/peggy/v1/tx.registry";

const {
  cancelSendToEth,
  confirmBatch,
  depositClaim,
  eRC20DeployedClaim,
  requestBatch,
  sendToEth,
  setOrchestratorAddresses,
  submitBadSignatureEvidence,
  valsetConfirm,
  valsetUpdateClaim,
  withdrawClaim,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Visualizing InterchainJS Encoder Components (Mermaid)
DESCRIPTION: This Mermaid diagram shows the relationship between InterchainJS encoders and related packages like @interchainjs/auth, @interchainjs/utils, and @interchainjs/cosmos-types. It highlights specific components like Secp256k1/EthSecp256k1 Auth and various utilities, illustrating the modular structure of the encoding layer.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
graph LR
    encoders[Encoders] --> auth["@interchainjs/auth"]
    encoders --> utils["@interchainjs/utils"]
    encoders --> cosmos_types["@interchainjs/cosmos-types"]

    auth --> secp256k1_auth["Secp256k1 Auth"]
    auth --> ethSecp256k1_auth["EthSecp256k1 Auth"]

    utils --> signer_utils["Signer Utilities"]
    utils --> crypto_utils["Crypto Utilities"]

    style encoders fill:#f9f,stroke:#333,stroke-width:2px
    style auth fill:#ccf,stroke:#333,stroke-width:2px
    style utils fill:#ccf,stroke:#333,stroke-width:2px
```

----------------------------------------

TITLE: CosmJS Wallet Generation (TypeScript)
DESCRIPTION: Shows the process of generating a wallet from a mnemonic and retrieving the account address using CosmJS's DirectSecp256k1HdWallet and makeCosmoshubPath.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
import { makeCosmoshubPath } from "@cosmjs/crypto";

(async () => {
  const mnemonic = "your mnemonic here";
  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {
    hdPaths: [makeCosmoshubPath(0)],
  });
  const [account] = await wallet.getAccounts();
  console.log("Wallet address:", account.address);
})();
```

----------------------------------------

TITLE: Crisis Module Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing transaction helper functions specifically for the Cosmos Crisis module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_14

LANGUAGE: js
CODE:
```
// tx helpers
import {
  verifyInvariant,
  updateParams,
} from "@interchainjs/cosmos/crisis/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Circuit Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Circuit module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_12

LANGUAGE: js
CODE:
```
// query helpers
import {
  getAccount,
  getAccounts,
  getDisabledList,
} from "@interchainjs/cosmos/circuit/v1/query.rpc.func";

// tx helpers
import {
  authorizeCircuitBreaker,
  tripCircuitBreaker,
  resetCircuitBreaker,
} from "@interchainjs/cosmos/circuit/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Deploying Starship Infrastructure with Yarn (TLDR)
DESCRIPTION: This snippet provides a quick sequence of `yarn starship` commands to set up, deploy, and manage the `starship` testing infrastructure, including setup, deployment, waiting for readiness, and port forwarding.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
# setup helm/starship
yarn starship setup

# sanity check
yarn starship get-pods

# deploy starship
yarn starship deploy

# wait til STATUS=Running
yarn starship wait-for-pods
or
watch yarn starship get-pods

# port forwarding
yarn starship start-ports

# check pids
yarn starship port-pids
```

----------------------------------------

TITLE: Importing Mint Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the Cosmos SDK Mint module from the `@interchainjs/cosmos/mint/v1beta1` package. These helpers facilitate interacting with the mint module's RPC endpoints.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_20

LANGUAGE: js
CODE:
```
// query helpers
import {
  getParams,
  getInflation,
  getAnnualProvisions,
} from "@interchainjs/cosmos/mint/v1beta1/query.rpc.func";

// tx helpers
import { updateParams } from "@interchainjs/cosmos/mint/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Setting Up Local Kubernetes Cluster with Kind and Yarn
DESCRIPTION: This command uses `yarn starship` to create a local Kubernetes cluster using `kind`, providing a local environment for deploying and testing the `starship` infrastructure.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn starship setup-kind
```

----------------------------------------

TITLE: Importing Auction Message Composer Functions (JavaScript)
DESCRIPTION: Imports the `MessageComposer` for the Injective Auction module from `injectivejs` and extracts the `bid` message creation function using `withTypeUrl` for composing auction bid transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import { MessageComposer } from "injectivejs/injective/auction/v1beta1/tx.registry";

const { bid } = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Auction Transaction Helper Function
DESCRIPTION: Shows how to import the `bid` transaction helper function specifically for the Injective auction module.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_4

LANGUAGE: js
CODE:
```
import { bid } from "injectivejs/injective/auction/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: AminoSigner Class Methods - TypeScript
DESCRIPTION: Defines the constructor for the AminoSigner class and a static method `fromWalletToSigners`. The constructor initializes an instance, while `fromWalletToSigners` creates AminoSigners from an existing wallet signer, typically returning signers for all accounts in the wallet. Both methods require encoders, converters, and optionally an endpoint and options.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
encoders: Encoder[],
       converters: AminoConverter[],
       endpoint?: string | HttpEndpoint,
       options?: SignerOptions
     ) {
       // Implementation details...
     }

     // Create AminoSigners from a wallet (returns all accounts)
     static async fromWalletToSigners(
       signer: OfflineAminoSigner | IAminoGenericOfflineSigner,
       encoders: Encoder[],
       converters: AminoConverter[],
       endpoint?: string | HttpEndpoint,
       options?: SignerOptions
     ) {
       // Implementation details...
     }
   }
```

----------------------------------------

TITLE: Importing Exchange RPC Functions (JavaScript)
DESCRIPTION: Imports various RPC functions from the `injectivejs` library for interacting with the Injective Exchange module, covering operations like trading, deposits, withdrawals, and market management.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
import {
  activateStakeGrant,
  adminUpdateBinaryOptionsMarket,
  authorizeStakeGrants,
  batchCancelBinaryOptionsOrders,
  batchCancelDerivativeOrders,
  batchCancelSpotOrders,
  batchCreateDerivativeLimitOrders,
  batchCreateSpotLimitOrders,
  batchUpdateOrders,
  cancelBinaryOptionsOrder,
  cancelDerivativeOrder,
  cancelSpotOrder,
  createBinaryOptionsLimitOrder,
  createBinaryOptionsMarketOrder,
  createDerivativeLimitOrder,
  createDerivativeMarketOrder,
  createSpotLimitOrder,
  createSpotMarketOrder,
  decreasePositionMargin,
  deposit,
  emergencySettleMarket,
  externalTransfer,
  increasePositionMargin,
  instantBinaryOptionsMarketLaunch,
  instantExpiryFuturesMarketLaunch,
  instantPerpetualMarketLaunch,
  instantSpotMarketLaunch,
  liquidatePosition,
  privilegedExecuteContract,
  rewardsOptOut,
  subaccountTransfer,
  updateDerivativeMarket,
  updateParams,
  updateSpotMarket,
  withdraw,
} from "injectivejs/injective/exchange/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Implementing DocAuth with Generic Offline Signer - TypeScript
DESCRIPTION: Defines an interface and a class to wrap an existing OfflineAminoSigner into a standard generic interface (IAminoGenericOfflineSigner) compatible with the DocAuth approach, facilitating the signing of structured documents like AminoSignDoc.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export interface IAminoGenericOfflineSigner
  extends IGenericOfflineSigner<
    string,
    CosmosAminoDoc,
    AminoSignResponse,
    IAminoGenericOfflineSignArgs,
    AccountData
  > {}
```

LANGUAGE: TypeScript
CODE:
```
export class AminoGenericOfflineSigner
  implements IAminoGenericOfflineSigner
{
  constructor(public offlineSigner: OfflineAminoSigner) {}

  readonly signMode: string = SIGN_MODE.AMINO;

  getAccounts(): Promise<readonly AccountData[]> {
    return this.offlineSigner.getAccounts();
  }

  sign({ signerAddress, signDoc }: IAminoGenericOfflineSignArgs) {
    return this.offlineSigner.signAmino(signerAddress, signDoc);
  }
}
```

----------------------------------------

TITLE: Importing Auction Message Composer (JS)
DESCRIPTION: Demonstrates how to import the `bid` message composer function specifically for the Injective auction module from `injective-vue`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_3

LANGUAGE: js
CODE:
```
const { bid } = injective.auction.v1beta1.MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Composing Insurance Messages (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the Injective Insurance module and destructures message creation functions (`createInsuranceFund`, `requestRedemption`, `underwrite`) using `withTypeUrl`. These are used for building insurance-related transaction messages.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_15

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/insurance/v1beta1/tx.registry";

const { createInsuranceFund, requestRedemption, underwrite } =
  MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Exchange Transaction Helper Functions
DESCRIPTION: Shows how to import specific transaction helper functions like `deposit`, `liquidatePosition`, and `activateStakeGrant` from the Injective exchange module.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_3

LANGUAGE: js
CODE:
```
import {
  deposit,
  liquidatePosition,
  activateStakeGrant,
} from "injectivejs/injective/exchange/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Composing OCR Messages (injectivejs) - JS
DESCRIPTION: Imports the `MessageComposer` for the Injective OCR module and destructures message creation functions using `withTypeUrl`. These are used for building transaction messages related to Off-chain Reporting (OCR).
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_16

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/ocr/v1beta1/tx.registry";

const {
  acceptPayeeship,
  createFeed,
  fundFeedRewardPool,
  setPayees,
  transferPayeeship,
  transmit,
  updateFeed,
  withdrawFeedRewardPool,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing Insurance Transaction Helper Functions
DESCRIPTION: This snippet shows the import for transaction helper functions related to the Injective Insurance module. These functions are used for operations like creating insurance funds, requesting redemptions, and underwriting.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import {
  createInsuranceFund,
  requestRedemption,
  underwrite,
} from "injectivejs/injective/insurance/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Defining Cosmos Amino Signer Types and Interface - TypeScript
DESCRIPTION: Defines the specific types used in the Cosmos Amino signing process, such as arguments, transaction type, sign document, address response, and broadcast response. It then defines the CosmosAminoSigner interface by extending the generic UniSigner with these specific types.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
SignArgs = CosmosSignArgs = {
  messages: Message[];
  fee?: StdFee;
  memo?: string;
  options?: Option;
};

Tx = TxRaw; // cosmos.tx.v1beta1.TxRaw

Doc = StdSignDoc;

AddressResponse = string;

BroadcastResponse = { hash: string };
```

LANGUAGE: TypeScript
CODE:
```
export type CosmosAminoSigner = UniSigner<
  CosmosSignArgs,
  TxRaw,
  StdSignDoc,
  string,
  BroadcastResponse
>;
```

----------------------------------------

TITLE: Importing Oracle Message Composers (JS)
DESCRIPTION: Imports the MessageComposer for Injective Oracle messages and destructures common message types for easy access.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_18

LANGUAGE: js
CODE:
```
import { MessageComposer } from "injectivejs/injective/oracle/v1beta1/tx.registry";

const {
  relayBandRates,
  relayCoinbaseMessages,
  relayPriceFeedPrice,
  relayProviderPrices,
  requestBandIBCRates,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Importing OCR Transaction Helper Functions
DESCRIPTION: This snippet shows the import for transaction helper functions related to the Injective OCR (Off-chain Reporting) module. These functions facilitate operations like creating feeds, funding reward pools, setting payees, and transmitting data.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import {
  acceptPayeeship,
  createFeed,
  fundFeedRewardPool,
  setPayees,
  transferPayeeship,
  transmit,
  updateFeed,
  withdrawFeedRewardPool,
} from "injectivejs/injective/ocr/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Get Ethereum Account Balance (Shell/cURL)
DESCRIPTION: Queries the Ethereum node via RPC using cURL to get the balance of a specific account (0x7e5f4552091a69125d5dfcb7b8c2659029395bdf) at the latest block.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
curl -X POST \
  -H "Content-Type: application/json" \
  --data '{"jsonrpc":"2.0","method":"eth_getBalance","params":["0x7e5f4552091a69125d5dfcb7b8c2659029395bdf", "latest"],"id":1}' \
  http://localhost:8545
```

----------------------------------------

TITLE: Stop Starship Infrastructure (Shell)
DESCRIPTION: Stops and cleans up the deployed Starship infrastructure components.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
yarn starship:stop
```

----------------------------------------

TITLE: Cleaning Up Local Kind Cluster with Yarn
DESCRIPTION: This command is used to delete the local Kubernetes cluster that was created using `kind` via `yarn starship setup-kind`, removing the cluster and freeing up resources.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
yarn starship clean-kind
```

----------------------------------------

TITLE: Clean Starship Infrastructure (Bash)
DESCRIPTION: Stops port-forwarding and deletes deployed helm charts to clean up the Starship infrastructure components.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
npm run starship clean
```

----------------------------------------

TITLE: Cleaning Up Starship Infrastructure with Yarn (TLDR)
DESCRIPTION: This snippet provides the primary `yarn` command for quickly tearing down the `starship` infrastructure, which stops port forwarding and cleans up deployed helm charts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
# stop port forwarding (done by clean() too)
# yarn starship stop-ports

# stop ports and delete & remove helm chart
yarn starship clean
```

----------------------------------------

TITLE: Tearing Down Starship Environment (TLDR)
DESCRIPTION: Outlines the commands to stop port forwarding and completely clean up the Starship deployment and associated resources.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
# stop port forwarding (done by clean() too)
# yarn starship stop-ports

# stop ports and delete & remove helm chart
yarn starship clean
```

----------------------------------------

TITLE: Implementing the Amino Transaction Builder - TypeScript
DESCRIPTION: Shows the structure of the AminoTxBuilder class, which extends BaseCosmosTxBuilder. It demonstrates setting the sign mode and outlines the methods required to build, serialize, and sync information from signed documents for the Amino signing process.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export class AminoTxBuilder extends BaseCosmosTxBuilder<CosmosAminoDoc> {
  constructor(
    protected ctx: BaseCosmosTxBuilderContext<
      AminoSignerBase<CosmosAminoDoc>
    >
  ) {
    // Set the sign mode
    super(SignMode.SIGN_MODE_LEGACY_AMINO_JSON, ctx);
  }
}
```

LANGUAGE: TypeScript
CODE:
```
// Build the signing document
async buildDoc({
  messages,
  fee,
  memo,
  options,
}: CosmosSignArgs): Promise<CosmosAminoDoc> {
  // Implementation details...
}
```

LANGUAGE: TypeScript
CODE:
```
// Serialize the signing document
async buildDocBytes(doc: CosmosAminoDoc): Promise<Uint8Array> {
  // Implementation details...
}
```

LANGUAGE: TypeScript
CODE:
```
async syncSignedDoc(
  txRaw: TxRaw,
  signResp: SignDocResponse<CosmosAminoDoc>
): Promise<TxRaw> {
  // Implementation details...
}
```

----------------------------------------

TITLE: Checking Kubernetes Connection with Kubectl
DESCRIPTION: This standard `kubectl` command verifies connectivity to a Kubernetes cluster by attempting to list the pods in the current context.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
kubectl get pods
```

----------------------------------------

TITLE: Querying Injective RPC Endpoints with React Hooks
DESCRIPTION: Demonstrates how to use `useChain` to get the RPC endpoint for Injective and then query Cosmos and Injective-specific modules using the provided RPC functions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_1

LANGUAGE: js
CODE:
```
import { getAllBalances } from "injectivejs/cosmos/bank/v1beta1/query.rpc.func";
import { getExchangeBalances } from "injectivejs/injective/exchange/v1beta1/query.rpc.func";

{ getRpcEndpoint } = useChain("injective");

const endpoint = await getRpcEndpoint();

// now you can query the cosmos modules
const balance = await getAllBalances(endpoint, {
  address: "inj1addresshere",
});

// you can also query the injective modules
const exchangeBalance = await getExchangeBalances(endpoint, {});
```

----------------------------------------

TITLE: Importing OCR RPC Functions (JavaScript)
DESCRIPTION: Imports RPC functions from the `injectivejs` library for interacting with the Injective OCR (Off-chain Reporting) module, used for managing data feeds and rewards.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
import {
  acceptPayeeship,
  createFeed,
  fundFeedRewardPool,
  setPayees,
  transferPayeeship,
  transmit,
  updateFeed,
  withdrawFeedRewardPool,
} from "injectivejs/injective/ocr/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Executing Starship End-to-End Tests
DESCRIPTION: Executes the end-to-end tests for the Starship environment using the `npm run starship:test` command.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm run starship:test
```

----------------------------------------

TITLE: Importing OCR Message Composer Functions (JavaScript)
DESCRIPTION: Imports the `MessageComposer` for the Injective OCR module from `injectivejs` and extracts message creation functions using `withTypeUrl` for composing OCR-related transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_17

LANGUAGE: javascript
CODE:
```
import { MessageComposer } from "injectivejs/injective/ocr/v1beta1/tx.registry";

const {
  acceptPayeeship,
  createFeed,
  fundFeedRewardPool,
  setPayees,
  transferPayeeship,
  transmit,
  updateFeed,
  withdrawFeedRewardPool,
} = MessageComposer.withTypeUrl;
```

----------------------------------------

TITLE: Checking Kubernetes Cluster Connection
DESCRIPTION: Executes the standard `kubectl get pods` command to verify connectivity to the configured Kubernetes cluster and list running pods.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
kubectl get pods
```

----------------------------------------

TITLE: Port Forward Ethereum Pod (Shell)
DESCRIPTION: Manually forwards a local port (8545) to the Ethereum pod within the Kubernetes cluster for direct RPC access.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
kubectl port-forward pods/ethereum-1337-0 8545:8545
```

----------------------------------------

TITLE: Check Kubernetes Pod Status (Bash)
DESCRIPTION: Lists the pods in the connected Kubernetes cluster to verify the connection and deployment status of components.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_10

LANGUAGE: bash
CODE:
```
kubectl get pods
```

----------------------------------------

TITLE: Run Starship End-to-End Tests (Bash)
DESCRIPTION: Executes the end-to-end tests against the running Starship infrastructure using the npm package runner.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
npm run starship:test
```

----------------------------------------

TITLE: Installing Starship Dependencies
DESCRIPTION: Executes the command to check for and install necessary dependencies like kubectl, kind, and helm, and fetches the required helm charts for Starship.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
yarn starship setup
```

----------------------------------------

TITLE: Setup Local Kind Cluster (Bash)
DESCRIPTION: Creates a local Kubernetes cluster using Kind, providing an environment for Starship deployment.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
yarn starship setup-kind
```

----------------------------------------

TITLE: Running Starship Tests (TLDR)
DESCRIPTION: Shows the basic commands to execute end-to-end tests against the deployed Starship environment and to run tests in watch mode.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
# test
yarn starship:test

# watch
yarn starship:watch
```

----------------------------------------

TITLE: Connect to Ethereum Websocket (Shell/wscat)
DESCRIPTION: Establishes a websocket connection to the Ethereum node's websocket endpoint (ws://127.0.0.1:8546) using wscat.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
wscat -c ws://127.0.0.1:8546
```

----------------------------------------

TITLE: Importing Query and Transaction Helpers/Hooks
DESCRIPTION: Provides examples of import statements for query helpers (getValidator), query hooks (useGetValidators), transaction helpers (delegate), and transaction hooks (useDelegate) from specific @interchainjs modules.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { useGetValidators } from "@interchainjs/react/cosmos/staking/v1beta1/query.rpc.react";
```

LANGUAGE: javascript
CODE:
```
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
import { useDelegate } from "@interchainjs/react/cosmos/staking/v1beta1/tx.rpc.react";
```

----------------------------------------

TITLE: Deploying Starship Environment
DESCRIPTION: Initiates the deployment of the mini-cosmos ecosystem using Starship, based on the configuration defined in `configs/config.yaml`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn starship deploy
```

----------------------------------------

TITLE: Deploying Starship Infrastructure
DESCRIPTION: Runs the `yarn starship deploy` command to deploy the mini-cosmos ecosystem infrastructure into the connected Kubernetes cluster using the specified configuration file.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn starship deploy
```

----------------------------------------

TITLE: Running Starship End-to-End Tests with Npm
DESCRIPTION: This command executes the end-to-end tests for `starship` using `npm run`, running them against the currently deployed infrastructure.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm run starship:test
```

----------------------------------------

TITLE: Initial Project Setup (Shell)
DESCRIPTION: Provides the shell commands required to set up the project after cloning the repository, including installing dependencies and building the development version of the code.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_15

LANGUAGE: shell
CODE:
```
yarn
yarn build:dev
```

----------------------------------------

TITLE: Run Starship End-to-End Tests (Shell)
DESCRIPTION: Executes the end-to-end tests against the running Starship infrastructure.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
yarn starship:test
```

----------------------------------------

TITLE: Run Injective Tests (Yarn)
DESCRIPTION: This command executes the test suite specifically configured for the Injective network within the project. Ensure environment variables, such as the private key, are correctly set before running.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/TestnetGuide.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn injective:test
```

----------------------------------------

TITLE: Cleaning Up Starship Deployment
DESCRIPTION: Stops port forwarding and deletes all deployed helm charts and associated resources, effectively tearing down the Starship infrastructure.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run starship clean
```

----------------------------------------

TITLE: Cleaning Up Starship Deployments
DESCRIPTION: Runs the `npm run starship clean` command to stop port forwarding and delete all deployed helm charts, effectively tearing down the Starship infrastructure.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run starship clean
```

----------------------------------------

TITLE: Consensus Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Consensus module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_13

LANGUAGE: js
CODE:
```
// query helpers
import { getParams } from "@interchainjs/cosmos/consensus/v1/query.rpc.func";

// tx helpers
import { updateParams } from "@interchainjs/cosmos/consensus/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Get Ethereum Chain ID (Shell/cURL)
DESCRIPTION: Queries the Ethereum node via RPC using cURL to retrieve its chain ID.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
curl -X POST -H "Content-Type: application/json" \
  --data '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' \
  http://localhost:8545/
```

----------------------------------------

TITLE: Generate SDK and Contract Bundles (Shell)
DESCRIPTION: Executes the codegen script, which processes contract schemas and protobuf definitions according to the configuration in scripts/interchainjs.telescope.json to bundle them into the interchainjs SDK.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_29

LANGUAGE: Shell
CODE:
```
yarn codegen
```

----------------------------------------

TITLE: Generating Code (Shell)
DESCRIPTION: Shows the shell command to run the code generation process. This process bundles contract schemas and protos into the injectivejs library, based on configuration found in `./scripts/inj.telescope.json`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_30

LANGUAGE: shell
CODE:
```
yarn codegen
```

----------------------------------------

TITLE: Publishing the Package (Shell)
DESCRIPTION: Provides the shell commands necessary to build the package types and then publish the package, typically to a package registry like npm.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_17

LANGUAGE: shell
CODE:
```
yarn build
yarn publish
```

----------------------------------------

TITLE: Running Codegen (Shell)
DESCRIPTION: Command to execute the code generation process, typically used to generate SDK code from contract schemas and proto definitions. Requires `yarn` and configured codegen scripts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_29

LANGUAGE: shell
CODE:
```
yarn codegen
```

----------------------------------------

TITLE: Running Codegen (Shell)
DESCRIPTION: Shows the shell command to execute the code generation process, which bundles contract schemas and protocol buffers based on the configuration specified in the 'scripts/inj.telescope.json' file.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#_snippet_16

LANGUAGE: shell
CODE:
```
yarn codegen
```

----------------------------------------

TITLE: Running Ethers-Specific Ethereum Tests
DESCRIPTION: Executes tests specifically related to the `ethers.js` library integration within the Ethereum network components. This also requires a running local Ganache node.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/devnet/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn test:ethers
```

----------------------------------------

TITLE: Running General Ethereum Devnet Tests
DESCRIPTION: Executes the standard test suite for the Ethereum network components of the project using a `yarn` script. This requires a running local Ganache node.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/devnet/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn test:devnet
```

----------------------------------------

TITLE: Auth Module Class Diagram - Mermaid
DESCRIPTION: This Mermaid class diagram illustrates the core interfaces and classes within the @interchainjs/auth module. It shows the base Auth interface, the extending ByteAuth and DocAuth interfaces, the abstract BaseDocAuth class, and concrete implementations like AminoDocAuth, DirectDocAuth, and Secp256k1Auth, highlighting their relationships and key methods.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/auth.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
classDiagram
    class Auth {
        <<interface>>
        +string algo
        +string hdPath
        +IKey getPublicKey(isCompressed: boolean)
    }

    class ByteAuth {
        <<interface>>
        +ISignatureWraper~Sig~ sign(data: Uint8Array)
    }

    class DocAuth {
        <<interface>>
        +string address
        +SignDocResponse~Doc~ signDoc(doc: Doc)
    }

    ByteAuth --|> Auth
    DocAuth --|> Auth
    BaseDocAuth ..|> DocAuth

    class BaseDocAuth {
        <<abstract>>
        +abstract Promise~SignDocResponse~ signDoc(doc: Doc)
    }

    class AminoDocAuth {
        +Promise~SignDocResponse~ signDoc(doc: StdSignDoc)
        +static Promise~AminoDocAuth[]~ fromOfflineSigner(offlineSigner: OfflineAminoSigner)
    }

    class DirectDocAuth {
        +Promise~SignDocResponse~ signDoc(doc: SignDoc)
        +static Promise~DirectDocAuth[]~ fromOfflineSigner(offlineSigner: OfflineDirectSigner)
    }

    BaseDocAuth <|-- AminoDocAuth
    BaseDocAuth <|-- DirectDocAuth

    class Secp256k1Auth {
        +Key privateKey
        +string algo
        +string hdPath
        +Secp256k1Auth(privateKey: Uint8Array | HDKey | Key, hdPath?: string)
        +static Secp256k1Auth[] fromMnemonic(mnemonic: string, hdPaths: string[], options?: AuthOptions)
        +Key getPublicKey(isCompressed?: boolean)
        +ISignatureWraper~RecoveredSignatureType~ sign(data: Uint8Array)
    }

    Secp256k1Auth ..|> ByteAuth

    style Auth fill:#f9f,stroke:#333,stroke-width:2px
    style ByteAuth fill:#f9f,stroke:#333,stroke-width:2px
    style DocAuth fill:#f9f,stroke:#333,stroke-width:2px
```

----------------------------------------

TITLE: Visualizing InterchainJS Signer Connections (Mermaid)
DESCRIPTION: This Mermaid diagram illustrates how InterchainJS connects different signer types (Amino, Direct, EIP712, Any) to various network classes (Cosmos, Injective, Ethereum, ANY), demonstrating its flexible architecture for handling signatures across different blockchain environments.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_1

LANGUAGE: mermaid
CODE:
```
graph LR
    signers --> cosmos_signer["Cosmos Network"]
    signers --> injective_signer["Injective Network"]
    signers --> ethereum_signer["Ethereum Network"]
    signers --> implement_signer["ANY Network"]

    cosmos_signer --> cosmos_amino["Amino Signer"]
    cosmos_signer --> cosmos_direct["Direct Signer"]

    ethereum_signer --> ethereum_eip712["EIP712 Signer"]

    injective_signer --> injective_amino["Amino Signer"]
    injective_signer --> injective_direct["Direct Signer"]

    implement_signer --> any_signer["Any Signer"]

    style signers fill:#f9f,stroke:#333,stroke-width:2px
```

----------------------------------------

TITLE: Deploy Starship Infrastructure (Bash)
DESCRIPTION: Deploys the Starship mini-cosmos ecosystem into the connected Kubernetes cluster using the configuration defined in `configs/config.yaml`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
yarn starship deploy
```

----------------------------------------

TITLE: Setting up Local Kind Cluster
DESCRIPTION: Runs the command to create a local Kubernetes cluster using Kind, providing an environment for deploying Starship if a cluster is not already available.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn starship setup-kind
```

----------------------------------------

TITLE: Setting up Development Environment (Shell)
DESCRIPTION: Commands to install project dependencies and build the development version of the project. Requires `yarn` to be installed.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_28

LANGUAGE: shell
CODE:
```
yarn
yarn build:dev
```

----------------------------------------

TITLE: Cleaning Up Starship E2E Environment (TLDR)
DESCRIPTION: Provides the command to stop port forwarding and completely clean up the deployed Starship environment by deleting helm charts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
# stop port forwarding (done by clean() too)
# yarn starship stop-ports

# stop ports and delete & remove helm chart
yarn starship clean
```

----------------------------------------

TITLE: Cleaning Up Starship Infrastructure with Npm
DESCRIPTION: This command uses `npm run` to execute the `starship clean` script, stopping port-forwarding and deleting all deployed helm charts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run starship clean
```

----------------------------------------

TITLE: Clean Up Local Kind Cluster (Bash)
DESCRIPTION: Deletes the local Kubernetes cluster that was created by Kind.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#_snippet_14

LANGUAGE: bash
CODE:
```
yarn starship clean-kind
```

----------------------------------------

TITLE: Deleting Local Kind Kubernetes Cluster
DESCRIPTION: Executes the `yarn starship clean-kind` command to delete the local Kubernetes cluster that was created using Kind.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
yarn starship clean-kind
```

----------------------------------------

TITLE: Deleting Local Kind Cluster
DESCRIPTION: Removes the local Kubernetes cluster created by Kind, freeing up resources if it is no longer needed.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_9

LANGUAGE: bash
CODE:
```
yarn starship clean-kind
```

----------------------------------------

TITLE: Checking Kubernetes Connection
DESCRIPTION: Verifies connectivity to the Kubernetes cluster by listing the pods, confirming that kubectl is configured correctly and can communicate with the cluster.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
kubectl get pods
```

----------------------------------------

TITLE: Running Starship End-to-End Tests with Yarn (TLDR)
DESCRIPTION: This snippet shows the `yarn` commands used for quickly running the end-to-end tests against the deployed `starship` infrastructure, including single run and watch mode.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
# test
yarn starship:test

# watch
yarn starship:watch
```

----------------------------------------

TITLE: Running Starship E2E Tests (TLDR)
DESCRIPTION: Shows the commands to execute the end-to-end tests using Starship, including a command for watching test file changes.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
# test
yarn starship:test

# watch
yarn starship:watch
```

----------------------------------------

TITLE: Running End-to-End Tests
DESCRIPTION: Executes the end-to-end tests against the running Starship infrastructure using the npm script `starship:test`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm run starship:test
```

----------------------------------------

TITLE: Publishing Package (Shell)
DESCRIPTION: Outlines the shell commands required to build the package types and then publish the package, typically to a registry like npm.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#_snippet_31

LANGUAGE: shell
CODE:
```
yarn build
yarn publish
```

----------------------------------------

TITLE: Publishing Project (Shell)
DESCRIPTION: Commands to build the project for production and publish it, likely to a package registry like npm. Requires `yarn` and appropriate publishing permissions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#_snippet_30

LANGUAGE: shell
CODE:
```
yarn build
yarn publish
```