TITLE: Combining Query and Transaction Helpers (JS)
DESCRIPTION: Shows a practical example of using getValidator to fetch validator information and then using delegate to perform a staking delegation transaction. It highlights the use of signing client, signer address, transaction parameters, fee, and memo.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// Import helpers
import { createQueryRpc } from "@interchainjs/cosmos/utils";
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";

// Query validator info
const { validator } = await getValidator(endpoint, {
  validatorAddr: "cosmosvaloper1..."
});

// Execute delegation
const result = await delegate(
  signingClient,
  signerAddress,
  {
    delegatorAddress: signerAddress,
    validatorAddress: validator.operatorAddress,
    amount: { denom: "uatom", amount: "1000000" }
  },
  fee,
  "Delegation via InterchainJS"
);
```

----------------------------------------

TITLE: Initializing Direct and Amino Signers
DESCRIPTION: Examples showing how to initialize `DirectSigner` and `AminoSigner` instances, providing authentication details, message encoders/converters, RPC endpoint, and optional prefix. It also shows calling `signAndBroadcast` on the direct signer and logging the transaction hash.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#_snippet_3

LANGUAGE: ts
CODE:
```
import { DirectSigner } from "@interchainjs/cosmos/signers/direct";

// const signer = new DirectSigner(<AUTH>, <ENCODER>[], <RPC_ENDPOINT>); // **ONLY** rpc endpoint is supported for now
const signer = new DirectSigner(
      directAuth,
      // as many as possible encoders registered here.
      [MsgDelegate, TextProposal, MsgSubmitProposal, MsgVote],
      rpcEndpoint,
      { prefix: chainInfo.chain.bech32_prefix }
    );
const aminoSigner = new AminoSigner(
      aminoAuth,
      // as many as possible encoders registered here.
      [MsgDelegate, TextProposal, MsgSubmitProposal, MsgVote],
      // as many as possible converters registered here.
      [MsgDelegate, TextProposal, MsgSubmitProposal, MsgVote],
      rpcEndpoint,
      { prefix: chainInfo.chain.bech32_prefix }
    );
const result = await signer.signAndBroadcast(<MESSAGE>[]);
console.log(result.hash); // the hash of TxRaw
```

----------------------------------------

TITLE: Initializing InterchainJS Signing Client (JS)
DESCRIPTION: Demonstrates how to initialize the `SigningClient` from `@interchainjs/cosmos/signing-client`. It connects to an RPC endpoint using `connectWithSigner` and requires an offline signer implementation like `AminoGenericOfflineSigner`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_26

LANGUAGE: js
CODE:
```
import { SigningClient } from "@interchainjs/cosmos/signing-client";

const signingClient = await SigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new AminoGenericOfflineSigner(aminoOfflineSigner)
);
```

----------------------------------------

TITLE: Using useGetBalance Hook with InterchainJS Vue (TypeScript)
DESCRIPTION: Shows how to use the tree-shakable `useGetBalance` hook from `@interchainjs/vue` within a Vue component. It demonstrates setting up the request parameters using `computed`, configuring the hook with options (like `enabled` and `select`), and accessing the result, loading state, and refetch function. Requires a Vue setup with `computed` and potentially `BigNumber`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Import only what you need
import { useGetBalance } from '@interchainjs/vue/cosmos/bank/v1beta1/query.rpc.vue';

// Initialize RPC endpoint and address, then you can get balance by tree shakable hooks
  const request = computed(() => ({
    address: address.value,
    denom,
  }));

  const {
    data: balance,
    isSuccess: isBalanceLoaded,
    isLoading: isFetchingBalance,
    refetch: refetchBalance
  } = useGetBalance({
    request,
    options: {
      enabled: !!address,
      select: ({ balance }) =>
        new BigNumber(balance?.amount ?? 0).multipliedBy(
          10 ** -COIN_DISPLAY_EXPONENT
        ),
    },
    clientResolver: rpcEndpoint,
  })
```

----------------------------------------

TITLE: Querying All Balances with InterchainJS (JS)
DESCRIPTION: Demonstrates how to import and use a tree-shakable query helper (`getAllBalances`) from `@interchainjs/cosmos` to fetch all balances for a given address from a blockchain endpoint. Requires an endpoint and the target address.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_0

LANGUAGE: js
CODE:
```
// Import only what you need
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// Now you can query the blockchain
const balance = await getAllBalances(endpoint, {
  address: "cosmos1addresshere",
});
```

----------------------------------------

TITLE: Creating and Querying with Cosmos RPC Client (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to create and use an RPC client in InterchainJS to query data from a Cosmos-based blockchain. It shows importing a specific query function (getAllBalances), obtaining an RPC endpoint using a hook (useChain), and then calling the query function with the endpoint and necessary parameters.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_3

LANGUAGE: js
CODE:
```
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

{ getRpcEndpoint } = useChain("cosmoshub");

const endpoint = await getRpcEndpoint();

// now you can query the cosmos modules
const balance = await getAllBalances(endpoint,{
  address: "cosmos1addresshere",
});
```

----------------------------------------

TITLE: Using Cosmos SigningClient with helper function
DESCRIPTION: Example demonstrating how to connect to a Cosmos RPC endpoint using `SigningClient.connectWithSigner` without needing to manually register message types when using tree-shakable helper functions like `submitProposal`. It shows how to call the helper function with the necessary parameters to sign and broadcast a transaction and log the transaction hash.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client';
import { submitProposal } from "interchainjs/cosmos/gov/v1beta1/tx.rpc.func";

const signingClient = await CosmosSigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new DirectGenericOfflineSigner(directSigner),
  {
    // no registry needed here anymore
    // registry: [
    // ],
    broadcast: {
      checkTx: true,
    },
  }
);

// Necessary typeurl and codecs will be registered automatically in the helper functions. Meaning users don't have to register them all at once.
const result = await submitProposal(
  signingClient,
  directAddress,
  {
    proposer: directAddress,
    initialDeposit: [
      {
        amount: '1000000',
        denom: denom,
      },
    ],
    content: {
      typeUrl: '/cosmos.gov.v1beta1.TextProposal',
      value: TextProposal.encode(contentMsg).finish(),
    },
  },
  fee,
  "submit proposal"
);
console.log(result.hash); // the hash of TxRaw
```

----------------------------------------

TITLE: Broadcasting Cosmos SDK Message (JS)
DESCRIPTION: Shows how to construct a Cosmos SDK message (specifically `MsgSend`) and broadcast it using the initialized `signingClient`. It includes defining the message structure, fee details, and calling the `signAndBroadcast` method.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_27

LANGUAGE: js
CODE:
```
const msg = {
  typeUrl: MsgSend.typeUrl,
  value: MsgSend.fromPartial({
    amount: [
      {
        denom: "uatom",
        amount: "1000",
      },
    ],
    toAddress: address,
    fromAddress: address,
  }),
};

const fee: StdFee = {
  amount: [
    {
      denom: "uatom",
      amount: "1000",
    },
  ],
  gas: "86364",
};
const response = await signingClient.signAndBroadcast(address, [msg], fee);
```

----------------------------------------

TITLE: Using Tree Shakable Query Helper (getAllBalances) (JavaScript)
DESCRIPTION: This JavaScript example illustrates the use of a tree shakable query helper function (getAllBalances) from InterchainJS. It shows importing only the required function and then calling it with the RPC endpoint and query parameters to retrieve data, demonstrating how this pattern optimizes bundle size and enables lazy initialization.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_4

LANGUAGE: js
CODE:
```
// Import only what you need
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// Now you can query the blockchain
const balance = await getAllBalances(endpoint, {
  address: "cosmos1addresshere",
});
```

----------------------------------------

TITLE: Using Cosmos SigningClient with registry
DESCRIPTION: Example demonstrating how to connect to a Cosmos RPC endpoint using `SigningClient.connectWithSigner`, providing a signer and manually registering message types (like MsgDelegate, MsgSend) in the registry option. It then shows how to sign and broadcast a transaction message array and log the transaction hash.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client';

const signingClient = await CosmosSigningClient.connectWithSigner(
  await getRpcEndpoint(),
  new DirectGenericOfflineSigner(directSigner),
  {
    registry: [
      // as many as possible encoders registered here.
      MsgDelegate,
      MsgSend,
    ],
    broadcast: {
      checkTx: true,
    },
  }
);

// sign and broadcast
const result = await signingClient.signAndBroadcast(<MESSAGE>[]);
console.log(result.hash); // the hash of TxRaw
```

----------------------------------------

TITLE: Fetching Balance with useGetBalance Hook (TS)
DESCRIPTION: Illustrates how to use the useGetBalance React hook from @interchainjs/react/cosmos/bank/v1beta1/query.rpc.react to fetch an account's balance. It shows hook initialization with options like context, enabled state, select function, and client resolver. Requires @tanstack/react-query.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// Import only what you need
import { defaultContext } from "@tanstack/react-query";
import { useGetBalance } from "@interchainjs/react/cosmos/bank/v1beta1/query.rpc.react";

// Initialize RPC endpoint and address
const { rpcEndpoint } =
  useQueryHooks(defaultChainName, {
    context: defaultContext,
    enabled: !!address,
  });

//Now you can get balance by tree shakable hooks
const balanceRes = useGetBalance({
  request: {
    address: address || '',
    denom: 'osmo'
  },
  options: {
    context: defaultContext,
    enabled: !!address && !!rpcEndpoint,
    select: ({ balance }) => balance?.amount,
    staleTime: 0
  },
  clientResolver: rpcEndpoint
})

const balance = balanceRes?.data
```

----------------------------------------

TITLE: Importing Tree Shakable Transaction Helper (createDelegate) (JavaScript)
DESCRIPTION: This JavaScript snippet shows how to import a specific tree shakable transaction helper function (createDelegate) from the InterchainJS Cosmos staking module. This follows the factory pattern for transaction helpers, enabling developers to selectively import and use functions for broadcasting transactions, optimizing bundle size via tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_6

LANGUAGE: js
CODE:
```
import { createDelegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Vue Composable for Querying Balances - InterchainJS
DESCRIPTION: Shows how to import and use a Vue composable provided by `@interchainjs/vue` to query all balances from the Cosmos Bank module.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_9

LANGUAGE: js
CODE:
```
import { useGetAllBalances } from "@interchainjs/vue/cosmos/bank/v1beta1/query.rpc.vue";
```

----------------------------------------

TITLE: React Hook for Querying Balances - InterchainJS
DESCRIPTION: Shows how to import and use a React hook provided by `@interchainjs/react` to query all balances from the Cosmos Bank module.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_8

LANGUAGE: js
CODE:
```
import { useGetAllBalances } from "@interchainjs/react/cosmos/bank/v1beta1/query.rpc.react";
```

----------------------------------------

TITLE: Querying Balances with getAllBalances Helper (JS)
DESCRIPTION: Shows how to import the getAllBalances function from @interchainjs/cosmos/bank/v1beta1/query.rpc.func and use it to query account balances on the blockchain by providing an endpoint and address.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Import only what you need
import { getAllBalances } from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// Now you can query the blockchain
const balance = await getAllBalances(endpoint, {
  address: "cosmos1addresshere"
});
```

----------------------------------------

TITLE: Importing IBC Transfer Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the IBC Transfer module from the `@interchainjs/ibc/applications/transfer/v1` package. These helpers are used for querying transfer-related information and initiating IBC token transfers.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_25

LANGUAGE: js
CODE:
```
// query helpers
import {
  getParams,
  getDenomHash,
  getEscrowAddress,
  getTotalEscrowForDenom,
} from "@interchainjs/ibc/applications/transfer/v1/query.rpc.func";

// tx helpers
import {
  transfer,
  updateParams,
} from "@interchainjs/ibc/applications/transfer/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Combining Query and Transaction Helpers (Staking) - InterchainJS
DESCRIPTION: Demonstrates how to use both query and transaction helpers from InterchainJS for a staking operation. It shows importing specific helpers, querying validator information, and then executing a delegation transaction.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_7

LANGUAGE: js
CODE:
```
// Import helpers
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";

// Query validator info
const { validator } = await getValidator(endpoint, {
  validatorAddr: "cosmosvaloper1...",
});

// Execute delegation
const result = await delegate(
  signingClient,
  signerAddress,
  {
    delegatorAddress: signerAddress,
    validatorAddress: validator.operatorAddress,
    amount: { denom: "uatom", amount: "1000000" },
  },
  fee,
  "Delegation via InterchainJS"
);
```

----------------------------------------

TITLE: Bank Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Bank module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_11

LANGUAGE: js
CODE:
```
// query helpers
import {
  getAllBalances,
  getDenomMetadata,
  getSupply,
  getParams,
} from "@interchainjs/cosmos/bank/v1beta1/query.rpc.func";

// tx helpers
import {
  send,
  multiSend,
} from "@interchainjs/cosmos/bank/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing CosmWasm Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the CosmWasm module from the `@interchainjs/cosmwasm/wasm/v1` package. These helpers facilitate interacting with smart contracts, including querying state and executing transactions like storing, instantiating, and migrating code.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_24

LANGUAGE: js
CODE:
```
// query helpers
import {
  getContractInfo,
  getContractHistory,
  getContractsByCode,
  getAllContractState,
  getRawContractState,
  getSmartContractState,
  getCode,
  getCodes,
} from "@interchainjs/cosmwasm/wasm/v1/query.rpc.func";

// tx helpers
import {
  storeCode,
  instantiateContract,
  migrateContract,
  updateAdmin,
  clearAdmin,
} from "@interchainjs/cosmwasm/wasm/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Combining InterchainJS Query and Transaction Helpers (JS)
DESCRIPTION: Provides an example of using both query (`getValidator`) and transaction (`delegate`) helpers together in a staking scenario. It shows querying validator information first and then using that information to construct and execute a delegation transaction. Requires an endpoint, signing client, signer address, and fee.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_4

LANGUAGE: js
CODE:
```
// Import helpers
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";

// Query validator info
const { validator } = await getValidator(endpoint, {
  validatorAddr: "cosmosvaloper1...",
});

// Execute delegation
const result = await delegate(
  singingClient,
  signerAddress,
  {
    delegatorAddress: signerAddress,
    validatorAddress: validator.operatorAddress,
    amount: { denom: "uatom", amount: "1000000" },
  },
  fee,
  "Delegation via InterchainJS"
);
```

----------------------------------------

TITLE: Importing Staking Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the Cosmos SDK Staking module from the `@interchainjs/cosmos/staking/v1beta1` package. These helpers enable querying staking information and performing staking operations like delegation and validation.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_22

LANGUAGE: js
CODE:
```
// query helpers
import {
  getValidators,
  getValidator,
  getValidatorDelegations,
  getValidatorUnbondingDelegations,
  getDelegation,
  getUnbondingDelegation,
} from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";

// tx helpers
import {
  createValidator,
  editValidator,
  delegate,
  undelegate,
  redelegate,
} from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing NFT Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the Cosmos SDK NFT module from the `@interchainjs/cosmos/nft/v1` package. These helpers are used for querying NFT data and sending NFT-related transactions.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_21

LANGUAGE: js
CODE:
```
// query helpers
import {
  getBalance,
  getOwner,
  getClass,
  getClasses,
  getNFTs,
  getNFT,
} from "@interchainjs/cosmos/nft/v1/query.rpc.func";

// tx helpers
import { send } from "@interchainjs/cosmos/nft/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Authz Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Authz module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_10

LANGUAGE: js
CODE:
```
// query helpers
import {
  getGrants,
  getGranterGrants,
  getGranteeGrants,
} from "@interchainjs/cosmos/authz/v1beta1/query.rpc.func";

// tx helpers
import {
  grant,
  revoke,
  exec,
} from "@interchainjs/cosmos/authz/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Tree Shakable Query Helper (getValidator) (JavaScript)
DESCRIPTION: This JavaScript snippet demonstrates how to import a specific tree shakable query helper function (getValidator) from the InterchainJS Cosmos staking module. This pattern allows developers to include only the necessary query functionality in their application bundle, contributing to optimization through tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_5

LANGUAGE: js
CODE:
```
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
```

----------------------------------------

TITLE: Gov Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Gov module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_18

LANGUAGE: js
CODE:
```
// query helpers
import {
  getProposal,
  getProposals,
  getVote,
  getVotes,
  getParams,
  getDeposit,
  getDeposits,
  getTallyResult,
} from "@interchainjs/cosmos/gov/v1beta1/query.rpc.func";

// tx helpers
import {
  submitProposal,
  deposit,
  vote,
  voteWeighted,
} from "@interchainjs/cosmos/gov/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing InterchainJS Query Helpers (JS)
DESCRIPTION: Illustrates importing specific query helpers and hooks for staking from `@interchainjs/cosmos` and `@interchainjs/vue`. Shows the pattern for importing individual functions (`getValidator`) and hooks (`useGetValidators`) for tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_2

LANGUAGE: js
CODE:
```
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { useGetValidators } from "@interchainjs/vue/cosmos/staking/v1beta1/query.rpc.vue";
```

----------------------------------------

TITLE: Distribution Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Distribution module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_15

LANGUAGE: js
CODE:
```
// query helpers
import {
  getParams,
  getValidatorDistributionInfo,
  getValidatorOutstandingRewards,
  getValidatorCommission,
  getValidatorSlashes,
  getDelegationRewards,
  getDelegationTotalRewards,
} from "@interchainjs/cosmos/distribution/v1beta1/query.rpc.func";

// tx helpers
import {
  setWithdrawAddress,
  withdrawDelegatorReward,
  withdrawValidatorCommission,
  fundCommunityPool,
  communityPoolSpend,
  updateParams,
} from "@interchainjs/cosmos/distribution/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing InterchainJS Transaction Helpers (JS)
DESCRIPTION: Illustrates importing specific transaction helpers and hooks for staking from `@interchainjs/cosmos` and `@interchainjs/vue`. Shows the pattern for importing individual functions (`createDelegate`) and hooks (`useDelegate`) for tree shaking.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#_snippet_3

LANGUAGE: js
CODE:
```
import { createDelegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
import { useDelegate } from "@interchainjs/vue/cosmos/staking/v1beta1/tx.rpc.vue";
```

----------------------------------------

TITLE: Importing Vesting Module Helpers (JS)
DESCRIPTION: Imports transaction helper functions for the Cosmos SDK Vesting module from the `@interchainjs/cosmos/vesting/v1beta1` package. These helpers are used for creating various types of vesting accounts.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_23

LANGUAGE: js
CODE:
```
// tx helpers
import {
  createVestingAccount,
  createPermanentLockedAccount,
  createPeriodicVestingAccount,
} from "@interchainjs/cosmos/vesting/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Evidence Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Evidence module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_16

LANGUAGE: js
CODE:
```
// query helpers
import {
  getEvidence,
  getAllEvidence,
} from "@interchainjs/cosmos/evidence/v1beta1/query.rpc.func";

// tx helpers
import { submitEvidence } from "@interchainjs/cosmos/evidence/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Feegrant Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Feegrant module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_17

LANGUAGE: js
CODE:
```
// query helpers
import {
  getAllowance,
  getAllowances,
  getAllowancesByGranter,
} from "@interchainjs/cosmos/feegrant/v1beta1/query.rpc.func";

// tx helpers
import {
  grantAllowance,
  revokeAllowance,
  pruneAllowances,
} from "@interchainjs/cosmos/feegrant/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Group Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Group module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_19

LANGUAGE: js
CODE:
```
// query helpers
import {
  getGroupInfo,
  getGroupPolicyInfo,
  getGroupMembers,
  getGroupsByAdmin,
  getGroupPoliciesByGroup,
  getGroupPoliciesByAdmin,
} from "@interchainjs/cosmos/group/v1/query.rpc.func";

// tx helpers
import {
  createGroup,
  updateGroupMetadata,
  updateGroupMembers,
  updateGroupAdmin,
  updateGroupPolicyMetadata,
  submitProposal,
  vote,
  exec,
} from "@interchainjs/cosmos/group/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Crisis Module Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing transaction helper functions specifically for the Cosmos Crisis module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_14

LANGUAGE: js
CODE:
```
// tx helpers
import {
  verifyInvariant,
  updateParams,
} from "@interchainjs/cosmos/crisis/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Circuit Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Circuit module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_12

LANGUAGE: js
CODE:
```
// query helpers
import {
  getAccount,
  getAccounts,
  getDisabledList,
} from "@interchainjs/cosmos/circuit/v1/query.rpc.func";

// tx helpers
import {
  authorizeCircuitBreaker,
  tripCircuitBreaker,
  resetCircuitBreaker,
} from "@interchainjs/cosmos/circuit/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Mint Module Helpers (JS)
DESCRIPTION: Imports query and transaction helper functions for the Cosmos SDK Mint module from the `@interchainjs/cosmos/mint/v1beta1` package. These helpers facilitate interacting with the mint module's RPC endpoints.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_20

LANGUAGE: js
CODE:
```
// query helpers
import {
  getParams,
  getInflation,
  getAnnualProvisions,
} from "@interchainjs/cosmos/mint/v1beta1/query.rpc.func";

// tx helpers
import { updateParams } from "@interchainjs/cosmos/mint/v1beta1/tx.rpc.func";
```

----------------------------------------

TITLE: Importing Query and Transaction Helpers/Hooks
DESCRIPTION: Provides examples of import statements for query helpers (getValidator), query hooks (useGetValidators), transaction helpers (delegate), and transaction hooks (useDelegate) from specific @interchainjs modules.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import { getValidator } from "@interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { useGetValidators } from "@interchainjs/react/cosmos/staking/v1beta1/query.rpc.react";
```

LANGUAGE: javascript
CODE:
```
import { delegate } from "@interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
import { useDelegate } from "@interchainjs/react/cosmos/staking/v1beta1/tx.rpc.react";
```

----------------------------------------

TITLE: Consensus Module Query and Transaction Imports - InterchainJS
DESCRIPTION: Provides examples of importing query and transaction helper functions specifically for the Cosmos Consensus module using `@interchainjs/cosmos`.
SOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#_snippet_13

LANGUAGE: js
CODE:
```
// query helpers
import { getParams } from "@interchainjs/cosmos/consensus/v1/query.rpc.func";

// tx helpers
import { updateParams } from "@interchainjs/cosmos/consensus/v1/tx.rpc.func";
```

----------------------------------------

TITLE: Creating Secp256k1HDWallet and Deriving Signers
DESCRIPTION: Example of generating wallets from a mnemonic using Secp256k1HDWallet and obtaining both Direct and Amino offline signers for a given chain prefix and HD path.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import {
AminoGenericOfflineSigner,
DirectGenericOfflineSigner,
OfflineAminoSigner,
OfflineDirectSigner,
} from '@interchainjs/cosmos/types/wallet';
import { Secp256k1HDWallet } from '@interchainjs/cosmos/wallets/secp256k1hd';

const commonPrefix = 'osmo'; // Example prefix
const cosmosHdPath = "m/44'/118'/0'/0/0";
let directSigner: OfflineDirectSigner, aminoSigner: OfflineAminoSigner;
let directAddress: string, aminoAddress: string;

// Initialize wallets
const directWallet = Secp256k1HDWallet.fromMnemonic(<MNEMONIC>, [
{
prefix: commonPrefix,
hdPath: cosmosHdPath,
},
]);
const aminoWallet = Secp256k1HDWallet.fromMnemonic(<MNEMONIC>, [
{
prefix: commonPrefix,
hdPath: cosmosHdPath,
},
]);
directSigner = directWallet.toOfflineDirectSigner();
aminoSigner = aminoWallet.toOfflineAminoSigner();
directAddress = (await directSigner.getAccounts())[0].address;
aminoAddress = (await aminoSigner.getAccounts())[0].address;

----------------------------------------

TITLE: Connecting Signing Client with Direct Signer
DESCRIPTION: Demonstrates how to connect the CosmosSigningClient using a DirectGenericOfflineSigner derived from an OfflineDirectSigner. Specifies broadcast options.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { DirectGenericOfflineSigner, OfflineDirectSigner } from '@interchainjs/cosmos/types/wallet';
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client';

declare const getRpcEndpoint: () => Promise<string>;
declare const directSigner: OfflineDirectSigner;

const signingClientDirect = await CosmosSigningClient.connectWithSigner(
await getRpcEndpoint(),
new DirectGenericOfflineSigner(directSigner),
{
broadcast: {
checkTx: true,
deliverTx: true,
useLegacyBroadcastTxCommit: true, // Example option
},
}
);

----------------------------------------

TITLE: Connecting Signing Client with Amino Signer
DESCRIPTION: Demonstrates how to connect the CosmosSigningClient using an AminoGenericOfflineSigner derived from an OfflineAminoSigner for legacy transaction compatibility.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { AminoGenericOfflineSigner, OfflineAminoSigner } from '@interchainjs/cosmos/types/wallet';
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client';

declare const getRpcEndpoint: () => Promise<string>;
declare const aminoSigner: OfflineAminoSigner;

const signingClientAmino = await CosmosSigningClient.connectWithSigner(
await getRpcEndpoint(),
new AminoGenericOfflineSigner(aminoSigner),
{
broadcast: {
checkTx: true,
deliverTx: true,
useLegacyBroadcastTxCommit: true, // Example option
},
}
);

----------------------------------------

TITLE: Querying Account Balance using Helper Function
DESCRIPTION: Example of using the `getBalance` query helper function to fetch the balance of a specific denomination for an address.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { getBalance } from "interchainjs/cosmos/bank/v1beta1/query.rpc.func";
import { QueryBalanceResponse } from 'interchainjs/cosmos/bank/v1beta1/query';

declare const getRpcEndpoint: () => Promise<string>;
declare const directAddress: string;
declare const denom: string;

const { balance }: QueryBalanceResponse = await getBalance(await getRpcEndpoint(), {
address: directAddress,
denom,
});

console.log(balance!.amount); // e.g., '10000000000'

----------------------------------------

TITLE: Querying Bonded Validators using Helper Function
DESCRIPTION: Example of using the `getValidators` query helper function to fetch validators with a specific status (e.g., Bonded).
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { getValidators } from "interchainjs/cosmos/staking/v1beta1/query.rpc.func";
import { QueryValidatorsResponse } from 'interchainjs/cosmos/staking/v1beta1/query';
import { BondStatus, bondStatusToJSON } from 'interchainjs/cosmos/staking/v1beta1/staking';

declare const getRpcEndpoint: () => Promise<string>;

const { validators }: QueryValidatorsResponse = await getValidators(await getRpcEndpoint(), {
status: bondStatusToJSON(BondStatus.BOND_STATUS_BONDED),
});

if (validators.length > 0) {
const validatorAddress = validators[0].operatorAddress;
console.log(validatorAddress);
}

----------------------------------------

TITLE: Delegating Tokens using Staking Helper Function
DESCRIPTION: Demonstrates using the `delegate` transaction helper function from the staking module to delegate tokens to a validator.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { delegate } from "interchainjs/cosmos/staking/v1beta1/tx.rpc.func";
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client'; // Assuming client is already connected
import { assertIsDeliverTxSuccess } from '@interchainjs/cosmos/utils';

declare const signingClient: CosmosSigningClient; // Assumes a connected SigningClient
declare const directAddress: string;
declare const validatorAddress: string;
declare const denom: string;

const delegationAmount = '5000000000'; // Example amount
const fee = {
amount: [{ denom, amount: '100000' }],
gas: '550000',
};

const result = await delegate(
signingClient,
directAddress,
{
delegatorAddress: directAddress,
validatorAddress: validatorAddress,
amount: {
amount: delegationAmount,
denom: denom,
},
},
fee,
"delegate memo" // Optional memo
);

assertIsDeliverTxSuccess(result);

----------------------------------------

TITLE: Submitting a Text Proposal using Gov Helper Function
DESCRIPTION: Example of using the `submitProposal` transaction helper function from the governance module to submit a `TextProposal`.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { submitProposal } from "interchainjs/cosmos/gov/v1beta1/tx.rpc.func";
import { TextProposal } from 'interchainjs/cosmos/gov/v1beta1/gov';
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client'; // Assuming client is already connected
import { assertIsDeliverTxSuccess } from '@interchainjs/cosmos/utils';

declare const signingClient: CosmosSigningClient; // Assumes a connected SigningClient
declare const directAddress: string;
declare const denom: string;

const contentMsg = TextProposal.fromPartial({
title: 'Test Proposal',
description: 'Test text proposal for the e2e testing',
});

const fee = {
amount: [{ denom, amount: '100000' }],
gas: '550000',
};

const result = await submitProposal(
signingClient,
directAddress,
{
proposer: directAddress,
initialDeposit: [{ amount: '1000000', denom: denom }],
content: {
typeUrl: '/cosmos.gov.v1beta1.TextProposal',
value: TextProposal.encode(contentMsg).finish(),
},
},
fee,
"submit proposal memo" // Optional memo
);
assertIsDeliverTxSuccess(result);

// Extract proposal ID (see next snippet)

----------------------------------------

TITLE: Querying a Proposal using Gov Helper Function
DESCRIPTION: Example of using the `getProposal` query helper function to fetch details of a specific proposal by its ID.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { getProposal } from "interchainjs/cosmos/gov/v1beta1/query.rpc.func";
import { QueryProposalResponse } from 'interchainjs/cosmos/gov/v1beta1/query';

declare const getRpcEndpoint: () => Promise<string>;
declare const proposalId: string; // Assumes proposalId is known

const { proposal }: QueryProposalResponse = await getProposal(await getRpcEndpoint(), {
proposalId: BigInt(proposalId),
});

console.log(proposal.proposalId.toString()); // Should match proposalId
console.log(proposal.status);

----------------------------------------

TITLE: Voting on a Proposal using Gov Helper Function
DESCRIPTION: Demonstrates using the `vote` transaction helper function from the governance module to cast a vote on a proposal.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { vote } from "interchainjs/cosmos/gov/v1beta1/tx.rpc.func";
import { VoteOption } from 'interchainjs/cosmos/gov/v1beta1/gov';
import { SigningClient as CosmosSigningClient } from '@interchainjs/cosmos/signing-client'; // Assuming client is already connected
import { assertIsDeliverTxSuccess } from '@interchainjs/cosmos/utils';

declare const signingClient: CosmosSigningClient; // Assumes a connected SigningClient
declare const directAddress: string;
declare const proposalId: string; // Assumes proposalId is known
declare const denom: string;

const fee = {
amount: [{ denom, amount: '100000' }],
gas: '550000',
};

const result = await vote(
signingClient,
directAddress, // Voter address
{
proposalId: BigInt(proposalId),
voter: directAddress,
option: VoteOption.VOTE_OPTION_YES, // Or other VoteOption
},
fee,
"vote memo" // Optional memo
);
assertIsDeliverTxSuccess(result);

----------------------------------------

TITLE: Querying a Vote using Gov Helper Function
DESCRIPTION: Example of using the `getVote` query helper function to fetch details of a specific vote on a proposal by a voter.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { getVote } from "interchainjs/cosmos/gov/v1beta1/query.rpc.func";
import { QueryVoteResponse } from 'interchainjs/cosmos/gov/v1beta1/query';
import { VoteOption } from 'interchainjs/cosmos/gov/v1beta1/gov';

declare const getRpcEndpoint: () => Promise<string>;
declare const proposalId: string; // Assumes proposalId is known
declare const directAddress: string; // Voter address

const { vote: voteInfo }: QueryVoteResponse = await getVote(await getRpcEndpoint(), {
proposalId: BigInt(proposalId),
voter: directAddress,
});

console.log(voteInfo.proposalId.toString()); // Should match proposalId
console.log(voteInfo.voter); // Should match voter address
console.log(voteInfo.option); // Should match the voted option

----------------------------------------

TITLE: Asserting Successful Transaction Delivery
DESCRIPTION: Shows the usage of `assertIsDeliverTxSuccess` utility function to verify that a broadcasted transaction was successfully included in a block.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { assertIsDeliverTxSuccess } from '@interchainjs/cosmos/utils';
import { DeliverTxResponse } from '@interchainjs/cosmos/types/broadcast';

declare const result: DeliverTxResponse; // Assume 'result' is the outcome of a signAndBroadcast or helper function call

try {
assertIsDeliverTxSuccess(result);
console.log("Transaction successful:", result.transactionHash);
} catch (error) {
console.error("Transaction failed:", error);
}

----------------------------------------

TITLE: Using the useDelegate Hook for Staking Transactions
DESCRIPTION: This snippet demonstrates how to use the `useDelegate` hook from `@interchainjs/react` to initiate a delegation transaction in a React component. It shows the setup with a signing client resolver and toast handlers for user feedback.
SOURCE: cosmos

LANGUAGE: typescript
CODE:
import { useDelegate } from '@interchainjs/react/cosmos/staking/v1beta1/tx.rpc.react';
import { MsgDelegate } from '@interchainjs/react/cosmos/staking/v1beta1/tx';
import { defaultContext } from '@tanstack/react-query';

// Inside a React component
const chainName = 'your-chain-name'; // Replace with actual chain name
const signingClient; // Get the signingClient properly based on existing code

const { mutate: delegate, isLoading: isDelegating } = useDelegate({
clientResolver: signingClient,
options: {
context: defaultContext,
},
});

const address = 'delegator_address'; // Replace with actual delegator address
const selectedValidatorAddress = 'validator_address'; // Replace with actual validator address
const amount = 10000000; // Delegation amount without formatting
const denom = 'uatom'; // Token base denomination

const message = MsgDelegate.fromPartial({
delegatorAddress: address,
validatorAddress: selectedValidatorAddress,
amount: {
amount,
denom,
},
});

// Call delegate function later with transaction details
delegate({ signerAddress, message, fee, memo }, options);