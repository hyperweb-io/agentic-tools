TITLE: Initializing ChainRegistryClient (Basic) - JavaScript
DESCRIPTION: This snippet shows the basic initialization of the `ChainRegistryClient`. It requires an options object specifying the `chainNames` for which data should be fetched. After instantiation, call `fetchUrls()` to load data.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/client/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { ChainRegistryClient } from '@chain-registry/v2-client';

const client = new ChainRegistryClient({
  chainNames: ['osmosis', 'juno']
});
```

----------------------------------------

TITLE: Fetching Dynamic Chain Data with @chain-registry/client - JavaScript
DESCRIPTION: Initializes the `ChainRegistryClient` with a list of specific chain names. Asynchronously fetches the relevant chain info, asset lists, and IBC data dynamically from remote URLs. Provides methods to retrieve the downloaded data for individual chains like 'osmosis'.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { ChainRegistryClient } from '@chain-registry/v2-client';

// create an instance of ChainRegistryClient by passing in the chain names
const client = new ChainRegistryClient({
  chainNames: [
    'osmosis',
    'juno',
    'stargaze'
  ]
});

// chain info, assets and ibc data will be downloaded dynamically by invoking fetchUrls method
await client.fetchUrls();
// get chain data
const chain = client.getChain('osmosis');
// get asset list
const assetList = client.getChainAssetList('osmosis');
// get ibc data
const ibcData = client.getChainIbcData('osmosis');
// get asset list (including ibc assets)
const generatedAssetList = client.getGeneratedAssetLists('osmosis');
```

----------------------------------------

TITLE: Fetching Chain/Asset Data (Client) - JavaScript
DESCRIPTION: This asynchronous call triggers the `ChainRegistryClient` to fetch all configured chain, asset, and IBC data from the registry URLs determined by the client's initialization options. This method must complete before accessing fetched data.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/client/README.md#_snippet_5

LANGUAGE: javascript
CODE:
```
await client.fetchUrls();
```

----------------------------------------

TITLE: Getting ChainInfo Object (Client) - JavaScript
DESCRIPTION: After fetching data with `fetchUrls()`, this method retrieves a comprehensive `ChainInfo` object for a specified chain name. The `ChainInfo` object aggregates the chain's configuration, assets, and related IBC data.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/client/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const osmosisInfo = client.getChainInfo('osmosis');
 // returns ChainInfo, which is an object containing everything

```

----------------------------------------

TITLE: Converting Base Unit to Display Unit (TS)
DESCRIPTION: This TypeScript snippet demonstrates using `convertBaseUnitToDisplayUnit` to convert an amount of an asset from its smallest unit (base unit) to the more common, user-friendly display unit, using the asset's exponent information.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_18

LANGUAGE: typescript
CODE:
```
const displayUnit = convertBaseUnitToDisplayUnit(assets, 'OSMO', 1000000);
// displayUnit is the representation of 1,000,000 base units in display units (e.g., OSMO)
```

----------------------------------------

TITLE: Fetching Chain Data with Direct Import (JavaScript)
DESCRIPTION: Demonstrates how to import and access chain, asset, and IBC data directly from the `chain-registry` package. This method loads all specified data into memory and allows querying it using standard JavaScript array methods like `find`.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/chain-registry/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { assets, chains, ibc } from '@chain-registry/v2';

const assetList = assets.find(({chain_name})=>chain_name==='osmosis');

console.log(assetList);
```

----------------------------------------

TITLE: Getting IBC Denomination by Base (TS)
DESCRIPTION: This TypeScript snippet illustrates how to use the `getIbcDenomByBase` function to calculate the unique IBC hash denomination for an asset when transferred between a source and destination chain, given the base denomination.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_11

LANGUAGE: typescript
CODE:
```
const denom = getIbcDenomByBase(ibc, 'osmosis', 'akash', assets, 'uakt');
// denom should be the IBC hashed denomination string
```

----------------------------------------

TITLE: Using Chain and AssetList Types (JavaScript)
DESCRIPTION: Demonstrates importing and utilizing the `Chain` and `AssetList` TypeScript types within JavaScript code. Shows how to define functions that accept typed parameters and examples of data structures that conform to these types for demonstration purposes. Requires the `@chain-registry/v2-types` package installed.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/types/README.md#_snippet_1

LANGUAGE: js
CODE:
```
import { Chain, AssetList } from '@chain-registry/v2-types';

function displayChainDetails(chain: Chain) {
    console.log(`Chain Name: ${chain.chainName}`);
    console.log(`Chain ID: ${chain.chainId}`);
    console.log(`Bech32 Prefix: ${chain.bech32Prefix}`);
}

function displayAssetDetails(assetList: AssetList) {
    assetList.assets.forEach(asset => {
        console.log(`Asset Name: ${asset.name}`);
        console.log(`Base Denom: ${asset.base}`);
        console.log(`Display Denom: ${asset.display}`);
    });
}

// Usage with hypothetical data
const sampleChain: Chain = {
    chainName: "Osmosis",
    chainId: "osmosis-1",
    bech32Prefix: "osmo",
    // Other necessary properties...
};

const sampleAssetList: AssetList = {
    chainName: "Osmosis",
    assets: [
        { name: "Osmo", symbol: "OSMO", base: "uosmo", display: "osmo" },
        // More assets...
    ],
};

displayChainDetails(sampleChain);
displayAssetDetails(sampleAssetList);
```

----------------------------------------

TITLE: Importing Specific Mainnet Chain Data for Tree-Shaking - JavaScript
DESCRIPTION: Imports static assets and chain information specifically for a single mainnet chain (Osmosis in this example) using a direct path import. This fine-grained import is highly effective for tree-shaking, including only data related to the specified chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { assets, chain } from '@chain-registry/v2/mainnet/osmosis';
```

----------------------------------------

TITLE: Getting Chain Object by Name (TS)
DESCRIPTION: This TypeScript snippet shows how to use the `getChainByChainName` function to retrieve a specific chain object from a list of chains using the chain's name as the lookup key.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_2

LANGUAGE: typescript
CODE:
```
const chain = getChainByChainName(chains, 'osmosis');
// { chain_name: 'osmosis', ... }
```

----------------------------------------

TITLE: Mapping CoinGecko Prices to Denominations (TS)
DESCRIPTION: This TypeScript snippet shows how to use `mapCoinGeckoPricesToDenoms` to create a mapping between asset denominations and their current prices, typically obtained from a source like CoinGecko, using the provided asset list.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_15

LANGUAGE: typescript
CODE:
```
const priceMap = mapCoinGeckoPricesToDenoms(assets, coinGeckoPrices);
// priceMap will now contain a mapping of denominations to their USD prices
```

----------------------------------------

TITLE: Importing Only Chain Info for a Specific Mainnet Chain - JavaScript
DESCRIPTION: Imports only the static chain information for a single mainnet chain (Osmosis) using a direct path import to the chain file. This is the most granular tree-shaking import for chain data, including only the core information for a specific chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import chain from '@chain-registry/v2/mainnet/osmosis/chain';
```

----------------------------------------

TITLE: Getting CoinGecko ID by Denomination (JS)
DESCRIPTION: This JavaScript snippet demonstrates how to retrieve the CoinGecko API ID associated with a specific asset's denomination using the `getCoinGeckoIdByDenom` function, useful for fetching market data.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const coinGeckoId = getCoinGeckoIdByDenom(assets, 'uosmo');
console.log(coinGeckoId); // 'osmosis'
```

----------------------------------------

TITLE: Importing Specific Mainnet Chain Info with Tree-Shaking (JavaScript)
DESCRIPTION: Example of importing only the chain information data for the Osmosis mainnet chain using a direct path import. This provides the most granular import for the chain info of a single chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/chain-registry/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import chain from '@chain-registry/v2/mainnet/osmosis/chain';
```

----------------------------------------

TITLE: Getting Generated Asset Lists (Client) - JavaScript
DESCRIPTION: This method generates and returns an array of `AssetList` objects for the specified chain. This includes the chain's native assets and additionally generates entries for IBC-connected assets based on the configured `ibcNamePairs`.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/client/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const generatedOsmosisAssets = client.getGeneratedAssetLists('osmosis');
// returns AssetList from '@chain-registry/types' — including generated IBC assets based on IBC connections
```

----------------------------------------

TITLE: Retrieving ChainInfo and Properties from ChainRegistry JavaScript
DESCRIPTION: Obtains a comprehensive ChainInfo object for a given chain ID. The example then shows how to access key properties of the ChainInfo object, including the full list of assets (`assetLists`), the core chain details (`chain`), and specifically the native asset list (`nativeAssetList`).
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/client/README.md#_snippet_16

LANGUAGE: javascript
CODE:
```
const chainInfo: ChainInfo = registry.getChainInfo('osmosis');

// AssetList[] of the generated assets
const assets: AssetList[] = chainInfo.assetLists;

// Chain 
const chain: Chain = chainInfo.chain;

// Native asset list
const nativeAssetList: AssetList = chainInfo.nativeAssetList;
```

----------------------------------------

TITLE: Importing Specific Mainnet Chain Assets with Tree-Shaking (JavaScript)
DESCRIPTION: Example of importing only the asset data for the Osmosis mainnet chain using a direct path import. This provides the most granular import for assets of a single chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/chain-registry/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import assets from '@chain-registry/v2/mainnet/osmosis/assets';
```

----------------------------------------

TITLE: Importing Specific Mainnet Chain Data with Tree-Shaking (JavaScript)
DESCRIPTION: Example of importing data specifically for the Osmosis mainnet chain using a direct path import. This further optimizes bundle size by only including the assets and chain info for the specified chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/chain-registry/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { assets, chain } from '@chain-registry/v2/mainnet/osmosis';
```

----------------------------------------

TITLE: Initializing ChainRegistryClient (Custom URL) - JavaScript
DESCRIPTION: This example demonstrates initializing the client with specific chain names, limiting the `ibcNamePairs` to a subset, and providing a custom `baseUrl` to fetch registry data from a source other than the default GitHub repository.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/client/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const client = new ChainRegistryClient({
  chainNames: ['osmosis', 'juno', 'stargaze', 'cosmoshub'],
  ibcNamePairs: [['osmosis', 'stargaze']],
  baseUrl: 'https://yourregistry.com/'
});
```

----------------------------------------

TITLE: Converting Dollar Value to Base Unit (TS)
DESCRIPTION: This TypeScript snippet shows how to use `convertDollarValueToBaseUnit` to determine the quantity of an asset, in its base unit, that corresponds to a specific dollar value, based on the provided asset list and price map.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_17

LANGUAGE: typescript
CODE:
```
const baseUnit = convertDollarValueToBaseUnit(assets, priceMap, 'OSMO', 100);
// baseUnit is the amount in base units of OSMO that equals 100 USD
```

----------------------------------------

TITLE: Converting Base Unit to Dollar Value (TS)
DESCRIPTION: This TypeScript snippet demonstrates how to use `convertBaseUnitToDollarValue` to calculate the equivalent value in USD for a given amount of an asset, specified in its base unit, using a previously generated price map.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_16

LANGUAGE: typescript
CODE:
```
const dollarValue = convertBaseUnitToDollarValue(assets, priceMap, 'OSMO', 1000000);
// dollarValue is the total value in USD of 1,000,000 base units of OSMO
```

----------------------------------------

TITLE: Importing Mainnet Data for Tree-Shaking - JavaScript
DESCRIPTION: Imports static assets and chain information specifically filtered for mainnet networks using a direct path import. This method leverages tree-shaking capabilities to include only the data relevant to mainnet chains, optimizing bundle size.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from '@chain-registry/v2/mainnet';
```

----------------------------------------

TITLE: Importing Only Assets for a Specific Mainnet Chain - JavaScript
DESCRIPTION: Imports only the static asset list for a single mainnet chain (Osmosis) using a direct path import to the assets file. This is the most granular tree-shaking import for assets, pulling in only the necessary data for a single chain's assets.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import assets from '@chain-registry/v2/mainnet/osmosis/assets';
```

----------------------------------------

TITLE: Converting Display Unit to Base Unit (TS)
DESCRIPTION: This TypeScript snippet shows how to use `convertDisplayUnitToBaseUnit` to convert an amount of an asset from its display unit back to its smallest representation, the base unit, utilizing the asset's exponent.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_19

LANGUAGE: typescript
CODE:
```
const baseUnit = convertDisplayUnitToBaseUnit(assets, 'OSMO', 1);
// baseUnit is the amount in base units that corresponds to 1 display unit (e.g., 1 OSMO)
```

----------------------------------------

TITLE: Rounding Down a Number (TS)
DESCRIPTION: This TypeScript snippet demonstrates the usage of the `roundDown` function to truncate a number towards zero, effectively removing any fractional part and returning the nearest lower integer as a string.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_20

LANGUAGE: typescript
CODE:
```
const rounded = roundDown(123.4567);
// rounded will be '123'
```

----------------------------------------

TITLE: Getting Chain Gas Price Ranges (TS)
DESCRIPTION: This TypeScript snippet shows how to use the `getChainGasPriceRanges` function to obtain an object containing the low, average, and high gas price suggestions for a specified chain name.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_5

LANGUAGE: typescript
CODE:
```
const gasPriceRanges = getChainGasPriceRanges(chains, 'osmosis');
// { low: number, average: number, high: number }
```

----------------------------------------

TITLE: Importing Mainnet Data with Tree-Shaking (JavaScript)
DESCRIPTION: Example of importing only mainnet chain and asset data from the `chain-registry` package using a direct path import. This method leverages tree-shaking to reduce bundle size by including only the mainnet data subset.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/chain-registry/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from '@chain-registry/v2/mainnet';
```

----------------------------------------

TITLE: Getting Chain Pretty Name (TS)
DESCRIPTION: This TypeScript snippet illustrates how to retrieve the user-friendly display name (pretty name) for a chain based on its internal name using the `getChainPrettyName` function.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_4

LANGUAGE: typescript
CODE:
```
const prettyName = getChainPrettyName(chains, 'osmosis');
// 'Osmosis'
```

----------------------------------------

TITLE: Getting IBC Denomination for STARS on Osmosis (TS)
DESCRIPTION: This TypeScript snippet provides a specific example of using `getIbcDenomByBase` to determine the IBC denomination for the Stargaze Token (STARS, base denom 'ustars') after it has been transferred to the Osmosis chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_13

LANGUAGE: typescript
CODE:
```
const starsDenom = getIbcDenomByBase(ibc, 'osmosis', 'stargaze', assets, 'ustars');
console.log(starsDenom); // Expected: 'ibc/987C17B11ABC2B20019178ACE62929FE9840202CE79498E29FE8E5CB02B7C0A4'
```

----------------------------------------

TITLE: Getting IBC Denomination for AKT on Osmosis (TS)
DESCRIPTION: This TypeScript snippet provides a specific example of using `getIbcDenomByBase` to find the IBC denomination for the Akash Token (AKT, base denom 'uakt') when it is transferred to the Osmosis chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_12

LANGUAGE: typescript
CODE:
```
const aktDenom = getIbcDenomByBase(ibc, 'osmosis', 'akash', assets, 'uakt');
console.log(aktDenom); // Expected: 'ibc/1480B8FD20AD5FCAE81EA87584D269547DD4D436843C1D20F15E00EB64743EF4'
```

----------------------------------------

TITLE: Getting Chain ID by Name (TS)
DESCRIPTION: This TypeScript snippet demonstrates how to get the unique chain ID string associated with a given chain name using the `getChainIdByChainName` utility function.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_3

LANGUAGE: typescript
CODE:
```
const chainId = getChainIdByChainName(chains, 'osmosis');
// 'osmosis-1'
```

----------------------------------------

TITLE: Importing Chain Utility Functions (JS)
DESCRIPTION: This JavaScript snippet demonstrates how to import various utility functions related to chain data and the 'chains' array from the 'chain-registry' package, which serves as a data source for these utilities.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import {
  getGasPriceRangesFromChain,
  getChainByChainName,
  getChainByChainId,
  getChainNameByChainId,
  getChainIdByChainName,
  getChainGasPriceRanges,
  getChainPrettyName,
  getChainBech32Prefix
} from '@chain-registry/v2-utils';

// import from chain-registry or your own Chain[]
import { chains } from '@chain-registry/v2';

// API
import { Chain } from '@chain-registry/types';
export interface GasPriceRanges {
    low: number;
    average: number;
    high: number;
}
export declare const getGasPriceRangesFromChain: (chain: Chain) => GasPriceRanges;
export declare const getChainByChainName: (chains: Chain[], chainName: string) => Chain | undefined;
export declare const getChainByChainId: (chains: Chain[], chainId: string) => Chain | undefined;
export declare const getChainNameByChainId: (chains: Chain[], chainId: string) => string | undefined;
export declare const getChainIdByChainName: (chains: Chain[], chainName: string) => string | undefined;
export declare const getChainGasPriceRanges: (chains: Chain[], chainName: string) => GasPriceRanges | undefined;
export declare const getChainPrettyName: (chains: Chain[], chainName: string) => string | undefined;
export declare const getChainBech32Prefix: (chains: Chain[], chainName: string) => string | undefined;
```

----------------------------------------

TITLE: Importing Asset Utility Functions (JS)
DESCRIPTION: This JavaScript snippet shows how to import various functions designed for interacting with asset data and the 'assets' array from the 'chain-registry' package, which provides the asset information.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import {
  getAssetByDenom,
  getAssetBySymbol,
  getChainLogo,
  getChainNameByDenom,
  getChainNameByStakingDenom,
  getCoinGeckoIdByDenom,
  getDenomByCoinGeckoId,
  getDenomBySymbol,
  getExponentByDenom,
  getExponentBySymbol,
  getNativeAssetByChainName,
  getSymbolByDenom,
  getAssetLogoByDenom,
  getAssetNameByDenom
} from '@chain-registry/v2-utils';

// import from chain-registry or your own AssetList[]
import { assets } from '@chain-registry/v2';

// API
import { Asset, AssetList, Chain, DenomUnit } from '@chain-registry/types';
export type Denom = DenomUnit['denom'];
export type Exponent = DenomUnit['exponent'];
export declare const getAssetByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => Asset | undefined;
export declare const getAssetBySymbol: (assets: AssetList[], symbol: string, chainName?: string) => Asset | undefined;
export declare const getDenomByCoinGeckoId: (assets: AssetList[], coinGeckoId: string, chainName?: string) => Denom | undefined;
export declare const getDenomsByCoinGeckoId: (assets: AssetList[], coinGeckoId: string, chainName?: string) => Denom[];
type GetCoinGeckoIdByDenomOptions = {
    chainName?: string;
    allowTestnet?: boolean;
    customAssetFilter?: (asset: Asset) => boolean;
    excludedChainNames?: string[];
};
export declare const getCoinGeckoIdByDenom: (assets: AssetList[], denom: Denom, { chainName, allowTestnet, customAssetFilter, excludedChainNames }?: GetCoinGeckoIdByDenomOptions) => string | undefined;
export declare const getSymbolByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => string | undefined;
export declare const getDenomBySymbol: (assets: AssetList[], symbol: string, chainName?: string) => Denom | undefined;
export declare const getExponentFromAsset: (asset: Asset) => number | undefined;
export declare const getExponentByDenomFromAsset: (asset: Asset, denom: string) => number | undefined;
export declare const getExponentByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => Exponent | undefined;
export declare const getExponentBySymbol: (assets: AssetList[], symbol: string, chainName?: string) => Exponent | undefined;
export declare const getNativeAssetByChainName: (assets: AssetList[], chainName: string) => Asset | undefined;
export declare const getAssetLogoByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => string | undefined;
export declare const getChainLogo: (assets: AssetList[], chainName: string) => string | undefined;
export declare const getAssetNameByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => string | undefined;
export declare const getChainNameByDenom: (assets: AssetList[], denom: Denom) => string | undefined;
export declare const getChainByStakingDenom: (chains: Chain[], denom: Denom) => Chain | undefined;
export declare const getChainNameByStakingDenom: (chains: Chain[], denom: Denom) => string | undefined;
```

----------------------------------------

TITLE: Importing Calculation Utility Functions (JS)
DESCRIPTION: This JavaScript snippet demonstrates how to import various utility functions focused on asset unit conversions and price calculations from the @chain-registry/utils package.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v2/packages/utils/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import {
  mapCoinGeckoPricesToDenoms,
  convertBaseUnitToDollarValue,
  convertDollarValueToBaseUnit,
  convertBaseUnitToDisplayUnit,
  convertDisplayUnitToBaseUnit,
  roundDown
} from '@chain-registry/v2-utils';

// API
import { AssetList } from '@chain-registry/types';
import { Denom } from './assets';
export interface CoinGeckoUSDPrice {
    usd: number;
}
export interface DenomPriceMap {
    [key: Denom]: number;
}
export declare const mapCoinGeckoPricesToDenoms: (assets: AssetList[], prices: Record<string, CoinGeckoUSDPrice>) => DenomPriceMap;
export declare const roundDown: (value: number | string) => string;
export declare const convertBaseUnitToDollarValue: (assets: AssetList[], prices: DenomPriceMap, symbol: string, amount: string | number, chainName?: string) => string;
export declare const convertBaseUnitToDollarValueByDenom: (assets: AssetList[], prices: DenomPriceMap, denom: string, amount: string | number, chainName?: string) => string;
export declare const convertDollarValueToBaseUnit: (assets: AssetList[], prices: DenomPriceMap, symbol: string, value: string | number, chainName?: string) => string;
export declare const convertBaseUnitToDisplayUnit: (assets: AssetList[], symbol: string, amount: string | number, chainName?: string) => string;
export declare const convertBaseUnitToDisplayUnitByDenom: (assets: AssetList[], denom: string, amount: string | number, chainName?: string) => string;
export declare const convertDisplayUnitToBaseUnit: (assets: AssetList[], symbol: string, amount: string | number, chainName?: string) => string;
```
