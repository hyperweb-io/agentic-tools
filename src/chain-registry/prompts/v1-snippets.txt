TITLE: Tree-Shaking Import for Specific Mainnet Chain Assets | Javascript
DESCRIPTION: Demonstrates importing only the asset list for a particular mainnet chain (like Osmosis). This level of specificity ensures that only the asset data for that single chain is included in the final bundle.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_7

LANGUAGE: Javascript
CODE:
```
import assets from 'chain-registry/mainnet/osmosis/assets';
```

----------------------------------------

TITLE: Accessing Static Data | Javascript
DESCRIPTION: Demonstrates how to import and access bundled chain, asset, and IBC data directly from the chain-registry package. It shows how to find a specific asset list, like the one for Osmosis, from the imported data.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_1

LANGUAGE: Javascript
CODE:
```
import { assets, chains, ibc } from 'chain-registry';

const assetList = assets.find(({chain_name})=>chain_name==='osmosis');

console.log(assetList);
```

----------------------------------------

TITLE: Converting Chain Registry to Keplr ChainInfo using JavaScript
DESCRIPTION: Shows how to convert a chain object from @chain-registry/types (aliased from chain-registry) into the ChainInfo type required by Keplr wallet, using the chainRegistryChainToKeplr function. It demonstrates retrieving chain and asset data and passing them to the conversion function, including how to provide optional custom endpoint resolution logic. Requires @chain-registry/keplr, @chain-registry/types (or chain-registry), and @keplr-wallet/types packages installed.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/keplr/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from 'chain-registry';
import { chainRegistryChainToKeplr } from '@chain-registry/keplr';
import { ChainInfo } from '@keplr-wallet/types';

const chain = chains.find(({chain_name})=>chain_name==='osmosis');
const config: ChainInfo = chainRegistryChainToKeplr(chain, assets);

// you can add options as well to choose endpoints 
const config: ChainInfo = chainRegistryChainToKeplr(chain, assets, {
    getExplorer: () => 'https://myexplorer.com',
    getRestEndpoint: (chain) => chain.apis?.rest[1]?.address
    getRpcEndpoint: (chain) => chain.apis?.rpc[1]?.address
});
```

----------------------------------------

TITLE: Accessing Static Registry Data
DESCRIPTION: Demonstrates how to import and access static chain registry data directly from the `chain-registry` package, specifically finding the asset list for a given chain name like 'osmosis'. Requires the `chain-registry` package to be installed.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { assets, chains, ibc } from 'chain-registry';

const assetList = assets.find(({chain_name})=>chain_name==='osmosis');

console.log(assetList);
```

----------------------------------------

TITLE: Retrieving ChainInfo and Properties from ChainRegistry (JavaScript)
DESCRIPTION: This snippet shows how to obtain a comprehensive ChainInfo object using the `getChainInfo` method, passing the chain name. The ChainInfo object contains various details, including `assetLists` (an array of all assets), the `chain` object itself, and `nativeAssetList` (a specific AssetList for native tokens), which can be accessed as properties of the returned object.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_16

LANGUAGE: javascript
CODE:
```
const chainInfo: ChainInfo = registry.getChainInfo('osmosis');

// AssetList[] of the generated assets
const assets: AssetList[] = chainInfo.assetLists;

// Chain
const chain: Chain = chainInfo.chain;

// Native asset list
const nativeAssetList: AssetList = chainInfo.nativeAssetList;
```

----------------------------------------

TITLE: Importing Data for Specific Chain
DESCRIPTION: Examples showing how to import both chain and asset data specifically for a particular chain, such as Osmosis on the mainnet, by importing from the chain's dedicated path.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { assets, chain } from 'chain-registry/mainnet/osmosis';
```

----------------------------------------

TITLE: Accessing ChainInfo with ChainRegistryClient JavaScript
DESCRIPTION: After fetching data, this snippet demonstrates how to retrieve the comprehensive ChainInfo object for a specific chain using the getChainInfo method. The returned object contains detailed information about the chain, its assets, and connections.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const osmosisInfo = client.getChainInfo('osmosis');
 // returns ChainInfo, which is an object containing everything
```

----------------------------------------

TITLE: Tree-Shaking Import for Specific Mainnet Chain | Javascript
DESCRIPTION: Shows how to import chain and asset data for a single, specific mainnet chain (like Osmosis). This fine-grained import further optimizes bundle size by including data for only one chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_6

LANGUAGE: Javascript
CODE:
```
import { assets, chain } from 'chain-registry/mainnet/osmosis';
```

----------------------------------------

TITLE: Importing Specific Mainnet Chain Assets (e.g., Osmosis)
DESCRIPTION: Shows how to import *only* the asset list data for a specific mainnet chain, such as Osmosis. This allows for further optimization if only asset information is required.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/chain-registry/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
import assets from 'chain-registry/mainnet/osmosis/assets';
```

----------------------------------------

TITLE: Fetching Dynamic Data using Client | Javascript
DESCRIPTION: Illustrates how to use the @chain-registry/client package to dynamically fetch chain and asset data for specified chains. It shows creating a client instance, fetching data from remote URLs, and retrieving chain info, asset lists, IBC data, and generated asset lists.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_2

LANGUAGE: Javascript
CODE:
```
import { ChainRegistryClient } from '@chain-registry/client';

// create an instance of ChainRegistryClient by passing in the chain names
const client = new ChainRegistryClient({
  chainNames: [
    'osmosis',
    'juno',
    'stargaze'
  ]
});

// chain info, assets and ibc data will be downloaded dynamically by invoking fetchUrls method
await client.fetchUrls();
// get chain data
const chain = client.getChain('osmosis');
// get asset list
const assetList = client.getChainAssetList('osmosis');
// get ibc data
const ibcData = client.getChainIbcData('osmosis');
// get asset list (including ibc assets)
const generatedAssetList = client.getGeneratedAssetLists('osmosis');
```

----------------------------------------

TITLE: Using Dynamic Client
DESCRIPTION: Shows how to use the `@chain-registry/client` to dynamically fetch chain registry data for specified chains. It creates a client instance, fetches data from URLs, and provides methods to retrieve chain info, asset lists, and IBC data.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { ChainRegistryClient } from '@chain-registry/client';

// create an instance of ChainRegistryClient by passing in the chain names
const client = new ChainRegistryClient({
  chainNames: [
    'osmosis',
    'juno',
    'stargaze'
  ]
});

// chain info, assets and ibc data will be downloaded dynamically by invoking fetchUrls method
await client.fetchUrls();
// get chain data
const chain = client.getChain('osmosis');
// get asset list
const assetList = client.getChainAssetList('osmosis');
// get ibc data
const ibcData = client.getChainIbcData('osmosis');
// get asset list (including ibc assets)
const generatedAssetList = client.getGeneratedAssetLists('osmosis');
```

----------------------------------------

TITLE: Tree-Shaking Import for Mainnet Data | Javascript
DESCRIPTION: Shows how to import only the chain and asset data specifically for mainnet networks. This technique utilizes tree-shaking to reduce the final bundle size by excluding data for other network types.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_3

LANGUAGE: Javascript
CODE:
```
import { assets, chains } from 'chain-registry/mainnet';
```

----------------------------------------

TITLE: Importing Data by Network Type
DESCRIPTION: Examples demonstrating how to import static chain and asset data specifically for mainnet, testnet, or devnet networks by importing from their respective paths. This approach enables tree-shaking for smaller bundle sizes.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from 'chain-registry/mainnet';
```

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from 'chain-registry/testnet';
```

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from 'chain-registry/devnet';
```

----------------------------------------

TITLE: Importing Specific Mainnet Chain Data (e.g., Osmosis)
DESCRIPTION: Explains how to import data specifically for a single mainnet chain, such as Osmosis. This is the most granular level of tree-shaking, only including data relevant to the specified chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/chain-registry/README.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
import { assets, chain } from 'chain-registry/mainnet/osmosis';
```

----------------------------------------

TITLE: Accessing Chain Object with ChainRegistryClient JavaScript
DESCRIPTION: This snippet shows how to get the basic Chain object for a specific chain using the getChain method. This returns the core chain configuration details as defined in the `@chain-registry/types` package.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
const osmosisInfo = client.getChain('osmosis');
 // returns Chain from `@chain-registry/types`
```

----------------------------------------

TITLE: Initializing ChainRegistryClient JavaScript
DESCRIPTION: This snippet demonstrates the basic initialization of the ChainRegistryClient. It requires importing the ChainRegistryClient class and instantiating it with a configuration object specifying the chain names to fetch data for.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { ChainRegistryClient } from '@chain-registry/client';

const client = new ChainRegistryClient({
  chainNames: ['osmosis', 'juno']
});
```

----------------------------------------

TITLE: Dynamic Data Fetching with @chain-registry/client
DESCRIPTION: Shows how to use the '@chain-registry/client' package to dynamically fetch chain and asset data for specified chains at runtime. This is useful for applications that need to load data based on user selection or other dynamic criteria.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/chain-registry/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
import { ChainRegistryClient } from '@chain-registry/client';

// create an instance of ChainRegistryClient by passing in the chain names
const client = new ChainRegistryClient({
  chainNames: [
    'osmosis',
    'juno',
    'stargaze'
  ]
});

// chain info, assets and ibc data will be downloaded dynamically by invoking fetchUrls method
await client.fetchUrls();
// get chain data
const chain = client.getChain('osmosis');
// get asset list
const assetList = client.getChainAssetList('osmosis');
// get ibc data
const ibcData = client.getChainIbcData('osmosis');
// get asset list (including ibc assets)
const generatedAssetList = client.getGeneratedAssetLists('osmosis');
```

----------------------------------------

TITLE: Initializing ChainRegistryClient with Limited Asset Lists and IBC Pairs JavaScript
DESCRIPTION: This snippet illustrates how to initialize the ChainRegistryClient specifying a limited set of chains for which to fetch asset lists, distinct from the full list of chains, and also limiting the IBC name pairs to specific connections.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const clientWithAssetLists = new ChainRegistryClient({
  chainNames: ['osmosis', 'juno', 'stargaze'],
  assetListNames: ['osmosis', 'juno'],
  ibcNamePairs: [['osmosis', 'juno']]
});
```

----------------------------------------

TITLE: Getting Generated Asset Lists from ChainRegistryFetcher TypeScript
DESCRIPTION: This snippet retrieves the generated asset lists, including IBC-connected assets, directly from the ChainRegistryFetcher instance using the getGeneratedAssetLists method. It returns an array of `AssetList` objects for the specified chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_13

LANGUAGE: TypeScript
CODE:
```
// generated asset lists
const generated: AssetList[] = registry.getGeneratedAssetLists('osmosis');
```

----------------------------------------

TITLE: Converting Chain Registry data to Cosmostation AddChainParams in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to use the chainRegistryChainToCosmostation function to convert a Chain object from chain-registry into the AddChainParams format required by the Cosmostation extension. It shows retrieving chain and asset data and performing the conversion, including an example of providing custom options for selecting network endpoints.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/cosmostation/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { assets, chains } from 'chain-registry';
import { chainRegistryChainToCosmostation } from '@chain-registry/cosmostation';
import { AddChainParams } from '@cosmostation/extension-client/types/message';

const chain = chains.find(({chain_name})=>chain_name==='osmosis');
const config: AddChainParams = chainRegistryChainToCosmostation(chain, assets);

// you can add options as well to choose endpoints 
const config: AddChainParams = chainRegistryChainToCosmostation(chain, assets, {
    getRestEndpoint: (chain) => chain.apis?.rest[1]?.address
});
```

----------------------------------------

TITLE: Retrieving AssetList with ChainRegistryClient JavaScript
DESCRIPTION: This snippet retrieves the official asset list for a specified chain using the getAssetList method. The returned `AssetList` object details the assets native to that chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
const junoAssets = client.getAssetList('juno');
// returns AssetList from '@chain-registry/types'
```

----------------------------------------

TITLE: Getting Generated Assets from ChainInfo via Fetcher TypeScript
DESCRIPTION: This snippet shows another way to access generated asset lists by first retrieving the ChainInfo object for a chain using the Fetcher's getChainInfo method, and then accessing the assetLists property on the returned object.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_14

LANGUAGE: TypeScript
CODE:
```
// you can also get generated assets from ChainInfo object
const chainInfo: Chain = registry.getChainInfo('osmosis');
const generatedAssets: AssetList[] = chainInfo.assetLists;
```

----------------------------------------

TITLE: Tree-Shaking Import for Specific Mainnet Chain Info | Javascript
DESCRIPTION: Shows how to import only the chain information (excluding assets) for a specific mainnet chain (like Osmosis). This is useful when only the chain configuration data is needed.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_8

LANGUAGE: Javascript
CODE:
```
import chain from 'chain-registry/mainnet/osmosis/chain';
```

----------------------------------------

TITLE: Initializing ChainRegistryClient with Custom Options JavaScript
DESCRIPTION: This example shows how to initialize the ChainRegistryClient with more advanced options, including specifying a custom base URL for the registry data and limiting the IBC name pairs to fetch data only for specific chain connections.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const client = new ChainRegistryClient({
  chainNames: ['osmosis', 'juno', 'stargaze', 'cosmoshub'],
  ibcNamePairs: [['osmosis', 'stargaze']],
  baseUrl: 'https://yourregistry.com/'
});
```

----------------------------------------

TITLE: Importing Mainnet Data with Tree-Shaking
DESCRIPTION: Illustrates how to use specific import paths to only include data for mainnet chains and assets. This technique leverages tree-shaking to minimize the final application bundle size by excluding data for other networks.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/chain-registry/README.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from 'chain-registry/mainnet';
```

----------------------------------------

TITLE: Tree-Shaking Import for Testnet Data | Javascript
DESCRIPTION: Demonstrates importing only chain and asset data relevant to testnet networks using a specific import path. This enables tree-shaking to include only the necessary data for testnet environments.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_4

LANGUAGE: Javascript
CODE:
```
import { assets, chains } from 'chain-registry/testnet';
```

----------------------------------------

TITLE: Initializing ChainRegistryClient with Limited IBC Pairs TypeScript
DESCRIPTION: This TypeScript example shows how to initialize the ChainRegistryClient, specifying the chains to manage but limiting the scope of IBC data fetching to only the connections defined in ibcNamePairs. This affects which IBC-connected assets are considered when generating asset lists.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { ChainRegistryClient } from '@chain-registry/client';

const client = new ChainRegistryClient({
  chainNames: ['osmosis', 'juno', 'stargaze', 'cosmoshub'],
  ibcNamePairs: [['osmosis', 'stargaze']]
});
```

----------------------------------------

TITLE: Importing Asset Lists and Finding Chain Assets - JavaScript
DESCRIPTION: This JavaScript snippet shows how to import the `asset_lists` array from the `@chain-registry/assets` package and then use the `find` method to locate the asset list specific to a chain, such as 'osmosis'. The result is a single object containing the asset information for that chain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/assets/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { asset_lists } from '@chain-registry/assets';
const assetList = asset_lists
    .find(asset => asset.chain_name === 'osmosis');
```

----------------------------------------

TITLE: Importing Specific Mainnet Chain Info (e.g., Osmosis)
DESCRIPTION: Demonstrates how to import *only* the chain information for a specific mainnet chain, such as Osmosis. This allows for further optimization if only chain details are required.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/chain-registry/README.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
import chain from 'chain-registry/mainnet/osmosis/chain';
```

----------------------------------------

TITLE: Importing Devnet Data with Tree-Shaking
DESCRIPTION: Demonstrates how to use specific import paths to only include data for devnet chains and assets. This technique leverages tree-shaking to minimize the final application bundle size by excluding data for other networks.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/chain-registry/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from 'chain-registry/devnet';
```

----------------------------------------

TITLE: Importing Testnet Data with Tree-Shaking
DESCRIPTION: Shows how to use specific import paths to only include data for testnet chains and assets. This technique leverages tree-shaking to minimize the final application bundle size by excluding data for other networks.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/chain-registry/README.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { assets, chains } from 'chain-registry/testnet';
```

----------------------------------------

TITLE: Tree-Shaking Import for Non-Cosmos Assets | Javascript
DESCRIPTION: Illustrates importing asset data specifically for chains categorized as 'non-cosmos' within the registry. This allows including assets from integrated non-Cosmos networks while excluding standard Cosmos chain data.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/README.md#_snippet_9

LANGUAGE: Javascript
CODE:
```
import { assets } from 'chain-registry/noncosmos';
```

----------------------------------------

TITLE: Setting URLs and Fetching with ChainRegistryFetcher JavaScript
DESCRIPTION: This snippet shows an alternative way to use the ChainRegistryFetcher by first setting the 'urls' property directly on an instance and then calling the fetchUrls method to initiate fetching from the updated list of URLs.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
registry.urls = [
  // urls to fetch
];
await registry.fetchUrls();
```

----------------------------------------

TITLE: Fetching Data with ChainRegistryClient JavaScript
DESCRIPTION: This line executes the asynchronous fetchUrls method on the ChainRegistryClient instance. This triggers the client to download the chain, asset, and IBC data based on the configuration provided during initialization.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
await client.fetchUrls();
```

----------------------------------------

TITLE: Retrieving Chain Object from ChainRegistry (JavaScript)
DESCRIPTION: This snippet demonstrates how to retrieve a Chain object directly from an initialized ChainRegistry instance. It uses the `getChain` method, requiring the chain name (e.g., 'osmosis') as a string parameter. The method returns a single Chain object representing the requested blockchain.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/client/README.md#_snippet_15

LANGUAGE: javascript
CODE:
```
// get Chain from registry
const chain: Chain = registry.getChain('osmosis');
```

----------------------------------------

TITLE: Importing Chain Utility Functions (JS)
DESCRIPTION: This JavaScript snippet demonstrates how to import various utility functions related to chain data and the 'chains' array from the 'chain-registry' package, which serves as a data source for these utilities.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/utils/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import {
  getGasPriceRangesFromChain,
  getChainByChainName,
  getChainByChainId,
  getChainNameByChainId,
  getChainIdByChainName,
  getChainGasPriceRanges,
  getChainPrettyName,
  getChainBech32Prefix
} from '@chain-registry/utils';

// import from chain-registry or your own Chain[]
import { chains } from 'chain-registry';

// API
import { Chain } from '@chain-registry/types';
export interface GasPriceRanges {
    low: number;
    average: number;
    high: number;
}
export declare const getGasPriceRangesFromChain: (chain: Chain) => GasPriceRanges;
export declare const getChainByChainName: (chains: Chain[], chainName: string) => Chain | undefined;
export declare const getChainByChainId: (chains: Chain[], chainId: string) => Chain | undefined;
export declare const getChainNameByChainId: (chains: Chain[], chainId: string) => string | undefined;
export declare const getChainIdByChainName: (chains: Chain[], chainName: string) => string | undefined;
export declare const getChainGasPriceRanges: (chains: Chain[], chainName: string) => GasPriceRanges | undefined;
export declare const getChainPrettyName: (chains: Chain[], chainName: string) => string | undefined;
export declare const getChainBech32Prefix: (chains: Chain[], chainName: string) => string | undefined;
```

----------------------------------------

TITLE: Importing Asset Utility Functions (JS)
DESCRIPTION: This JavaScript snippet shows how to import various functions designed for interacting with asset data and the 'assets' array from the 'chain-registry' package, which provides the asset information.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/utils/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import {
  getAssetByDenom,
  getAssetBySymbol,
  getChainLogo,
  getChainNameByDenom,
  getChainNameByStakingDenom,
  getCoinGeckoIdByDenom,
  getDenomByCoinGeckoId,
  getDenomBySymbol,
  getExponentByDenom,
  getExponentBySymbol,
  getNativeAssetByChainName,
  getSymbolByDenom,
  getAssetLogoByDenom,
  getAssetNameByDenom
} from '@chain-registry/utils';

// import from chain-registry or your own AssetList[]
import { assets } from 'chain-registry';

// API
import { Asset, AssetList, Chain, DenomUnit } from '@chain-registry/types';
export type Denom = DenomUnit['denom'];
export type Exponent = DenomUnit['exponent'];
export declare const getAssetByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => Asset | undefined;
export declare const getAssetBySymbol: (assets: AssetList[], symbol: string, chainName?: string) => Asset | undefined;
export declare const getDenomByCoinGeckoId: (assets: AssetList[], coinGeckoId: string, chainName?: string) => Denom | undefined;
export declare const getDenomsByCoinGeckoId: (assets: AssetList[], coinGeckoId: string, chainName?: string) => Denom[];
type GetCoinGeckoIdByDenomOptions = {
    chainName?: string;
    allowTestnet?: boolean;
    customAssetFilter?: (asset: Asset) => boolean;
    excludedChainNames?: string[];
};
export declare const getCoinGeckoIdByDenom: (assets: AssetList[], denom: Denom, { chainName, allowTestnet, customAssetFilter, excludedChainNames }?: GetCoinGeckoIdByDenomOptions) => string | undefined;
export declare const getSymbolByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => string | undefined;
export declare const getDenomBySymbol: (assets: AssetList[], symbol: string, chainName?: string) => Denom | undefined;
export declare const getExponentFromAsset: (asset: Asset) => number | undefined;
export declare const getExponentByDenomFromAsset: (asset: Asset, denom: string) => number | undefined;
export declare const getExponentByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => Exponent | undefined;
export declare const getExponentBySymbol: (assets: AssetList[], symbol: string, chainName?: string) => Exponent | undefined;
export declare const getNativeAssetByChainName: (assets: AssetList[], chainName: string) => Asset | undefined;
export declare const getAssetLogoByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => string | undefined;
export declare const getChainLogo: (assets: AssetList[], chainName: string) => string | undefined;
export declare const getAssetNameByDenom: (assets: AssetList[], denom: Denom, chainName?: string) => string | undefined;
export declare const getChainNameByDenom: (assets: AssetList[], denom: Denom) => string | undefined;
export declare const getChainByStakingDenom: (chains: Chain[], denom: Denom) => Chain | undefined;
export declare const getChainNameByStakingDenom: (chains: Chain[], denom: Denom) => string | undefined;
```

----------------------------------------

TITLE: Importing Calculation Utility Functions (JS)
DESCRIPTION: This JavaScript snippet demonstrates how to import various utility functions focused on asset unit conversions and price calculations from the @chain-registry/utils package.
SOURCE: https://github.com/hyperweb-io/chain-registry/blob/main/v1/packages/utils/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import {
  mapCoinGeckoPricesToDenoms,
  convertBaseUnitToDollarValue,
  convertDollarValueToBaseUnit,
  convertBaseUnitToDisplayUnit,
  convertDisplayUnitToBaseUnit,
  roundDown
} from '@chain-registry/utils';

// API
import { AssetList } from '@chain-registry/types';
import { Denom } from './assets';
export interface CoinGeckoUSDPrice {
    usd: number;
}
export interface DenomPriceMap {
    [key: Denom]: number;
}
export declare const mapCoinGeckoPricesToDenoms: (assets: AssetList[], prices: Record<string, CoinGeckoUSDPrice>) => DenomPriceMap;
export declare const roundDown: (value: number | string) => string;
export declare const convertBaseUnitToDollarValue: (assets: AssetList[], prices: DenomPriceMap, symbol: string, amount: string | number, chainName?: string) => string;
export declare const convertBaseUnitToDollarValueByDenom: (assets: AssetList[], prices: DenomPriceMap, denom: string, amount: string | number, chainName?: string) => string;
export declare const convertDollarValueToBaseUnit: (assets: AssetList[], prices: DenomPriceMap, symbol: string, value: string | number, chainName?: string) => string;
export declare const convertBaseUnitToDisplayUnit: (assets: AssetList[], symbol: string, amount: string | number, chainName?: string) => string;
export declare const convertBaseUnitToDisplayUnitByDenom: (assets: AssetList[], denom: string, amount: string | number, chainName?: string) => string;
export declare const convertDisplayUnitToBaseUnit: (assets: AssetList[], symbol: string, amount: string | number, chainName?: string) => string;
```
